# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-04 16:43+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: eo\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: ./imp_isp-programigo_gvidilo.md:1
#, markdown-text, no-wrap
#, fuzzy
msgid "IMP_ISP (voir imp_isp.h)"
msgstr "IMP_ISP (voir imp_isp.h)"

#. type: Plain text
#: ./imp_isp-programigo_gvidilo.md:3
#, markdown-text, no-wrap
#, fuzzy
msgid ""
"Unité de traitement du signal d'image. Inclut principalement les paramètres "
"d'effet d'image, le changement de mode et l'enregistrement, l'ajout et la "
"suppression du capteur.\n"
msgstr "Bildosigna prilaborado. Ĉefe inkluzivas agordojn de bildaj efikoj, reĝimoŝaltilo kaj registrado, aldono kaj forigo de sensilo.\n"

#. type: Plain text
#: ./imp_isp-programigo_gvidilo.md:5
#, markdown-text, no-wrap
#, fuzzy
msgid ""
"Le module ISP n'a rien à voir avec le flux de données et n'a pas besoin "
"d'être lié, il n'agit que sur le paramétrage de l'effet et le contrôle du "
"capteur.\n"
msgstr "La ISP-modulo havas nenion komunan kun datuma fluo kaj ne bezonas esti ligita, ĝi nur funkcias laŭ efektagordo kaj sensila kontrolo.\n"

#. type: Title ##
#: ./imp_isp-programigo_gvidilo.md:6
#, markdown-text, no-wrap
#, fuzzy
msgid "Activation"
msgstr "Aktivigo"

#. type: Plain text
#: ./imp_isp-programigo_gvidilo.md:10
#, markdown-text, no-wrap
#, fuzzy
msgid ""
"Les étapes d'activation du module ISP sont les suivantes:\n"
"* étape 1 : Créer un module ISP\n"
msgstr "La paŝoj de aktivigo de ISP-modulo estas jenaj:\n* paŝo 1: Kreu ISP-modulon\n"

#. type: Fenced code block
#: ./imp_isp-programigo_gvidilo.md:11
#, no-wrap
msgid ""
"int ret = 0;\n"
"  // étape 1 : \n"
"  ret = IMP_ISP_Open (); \n"
"  if (ret <0) {\n"
"    printf (\"Échec de ISPInit\\n\");\n"
"    return -1;\n"
"  }\n"
msgstr ""
"int ret = 0;\n"
"  // étape 1 : \n"
"  ret = IMP_ISP_Open (); \n"
"  if (ret <0) {\n"
"    printf (\"Échec de ISPInit\\n\");\n"
"    return -1;\n"
"  }\n"

#. type: Bullet: '* '
#: ./imp_isp-programigo_gvidilo.md:21
#, markdown-text, no-wrap
#, fuzzy
msgid ""
"étape 2 : Ajouter un capteur, le pilote du capteur a été ajouté au noyau "
"avant cette opération.\n"
msgstr "2a paŝo: Aldonu sensilon, la sensila pelilo estis aldonita al la kerno antaŭ ĉi tiu operacio.\n"

#. type: Fenced code block
#: ./imp_isp-programigo_gvidilo.md:22
#, no-wrap
msgid ""
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[0].cbus_type = SENSOR_CONTROL_INTERFACE_I2C; // OU "
"SENSOR_CONTROL_INTERFACE_SPI\n"
"  sensor[0].i2c = {\n"
"    .type = \"xxx\", // nom du périphérique I2C, qui doit être cohérent avec "
"le nom de la structure i2c_device_id dans le pilote du capteur.\n"
"    .addr = xx, // adresse I2C\n"
"    .i2c_adapter_id = xx, // ID du contrôleur I2C où se trouve le capteur\n"
"  }\n"
"  /* OU\n"
"   * sensor[0].spi = {\n"
"   *   .modalias = \"xx\", // nom du périphérique SPI, doit être cohérent "
"avec le nom de la structure spi_device_id dans le pilote du capteur.\n"
"   *     .bus_num = xx, // adresse du bus SPI\n"
"   *}\n"
"   */\n"
"  sensor[1].name[0]=0; // pas d'autre capteur\n"
"  ret = IMP_ISP_AddSensor (& sensor); \n"
"  if (ret <0) {\n"
"    printf (\"Impossible d'enregistrer le capteur \\n\");\n"
"    return -1;\n"
"  }\n"
msgstr ""
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[0].cbus_type = SENSOR_CONTROL_INTERFACE_I2C; // OU "
"SENSOR_CONTROL_INTERFACE_SPI\n"
"  sensor[0].i2c = {\n"
"    .type = \"xxx\", // nom du périphérique I2C, qui doit être cohérent avec "
"le nom de la structure i2c_device_id dans le pilote du capteur.\n"
"    .addr = xx, // adresse I2C\n"
"    .i2c_adapter_id = xx, // ID du contrôleur I2C où se trouve le capteur\n"
"  }\n"
"  /* OU\n"
"   * sensor[0].spi = {\n"
"   *   .modalias = \"xx\", // nom du périphérique SPI, doit être cohérent "
"avec le nom de la structure spi_device_id dans le pilote du capteur.\n"
"   *     .bus_num = xx, // adresse du bus SPI\n"
"   *}\n"
"   */\n"
"  sensor[1].name[0]=0; // pas d'autre capteur\n"
"  ret = IMP_ISP_AddSensor (& sensor); \n"
"  if (ret <0) {\n"
"    printf (\"Impossible d'enregistrer le capteur \\n\");\n"
"    return -1;\n"
"  }\n"

#. type: Bullet: '* '
#: ./imp_isp-programigo_gvidilo.md:45
#, markdown-text, no-wrap
#, fuzzy
msgid "étape 3 : Activer le capteur, il va commencer à produire des images.\n"
msgstr "Paŝo 3: Aktivigu la sensilon, ĝi komencos produkti bildojn.\n"

#. type: Fenced code block
#: ./imp_isp-programigo_gvidilo.md:46
#, no-wrap
msgid ""
"  ret = IMP_ISP_EnableSensor (void);\n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"  ret = IMP_ISP_EnableSensor (void);\n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: ./imp_isp-programigo_gvidilo.md:54
#, markdown-text, no-wrap
#, fuzzy
msgid "étape 4 : Activer les réglages :\n"
msgstr "paŝo 4: Aktivigu la agordojn:\n"

#. type: Fenced code block
#: ./imp_isp-programigo_gvidilo.md:55
#, no-wrap
msgid ""
"  ret = IMP_ISP_EnableTuning (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le réglage \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"  ret = IMP_ISP_EnableTuning (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le réglage \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: ./imp_isp-programigo_gvidilo.md:63
#, markdown-text, no-wrap
#, fuzzy
msgid ""
"étape 5 : appeler l'interface de débogage ISP :  veuillez vous référer à la "
"documentation de l'interface de débogage ISP.\n"
msgstr "Paŝo 5: Alvoki ISP-elpurigan interfacon: Bonvolu raporti al la dokumentado de ISP-elpuriga interfaco.\n"

#. type: Title ##
#: ./imp_isp-programigo_gvidilo.md:65
#, markdown-text, no-wrap
#, fuzzy
msgid "désactivation du module ISP"
msgstr "Senaktivigo de ISP-modulo"

#. type: Plain text
#: ./imp_isp-programigo_gvidilo.md:69
#, markdown-text, no-wrap
#, fuzzy
msgid ""
"Les étapes de désinstallation du module ISP sont les suivantes:\n"
"* étape 1 : Désactiver le réglage ISP\n"
msgstr "La paŝoj por malinstali la ISP-modulon estas jenaj:\n* paŝo 1: Malŝalti la ISP-agordon\n"

#. type: Fenced code block
#: ./imp_isp-programigo_gvidilo.md:70
#, no-wrap
msgid ""
"int ret = 0;\n"
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[1].name[0] = 0;\n"
"  ret = IMP_ISP_DisableTuning ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le réglage \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"int ret = 0;\n"
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[1].name[0] = 0;\n"
"  ret = IMP_ISP_DisableTuning ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le réglage \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: ./imp_isp-programigo_gvidilo.md:82
#, markdown-text, no-wrap
#, fuzzy
msgid ""
"étape 2 : fermer les capteurs. (FrameSource doit être fermé avant cette "
"opération)\n"
msgstr "2a paŝo: fermu la sensilojn. (FrameSource devas esti fermita antaŭ ĉi tiu operacio)\n"

#. type: Fenced code block
#: ./imp_isp-programigo_gvidilo.md:83
#, no-wrap
msgid ""
"ret = IMP_ISP_DisableSensor (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"ret = IMP_ISP_DisableSensor (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: ./imp_isp-programigo_gvidilo.md:92
#, markdown-text, no-wrap
#, fuzzy
msgid ""
"étape 3 : supprimer les capteurs, les capteurs doivent être fermés avant "
"cette opération.\n"
msgstr "3a paŝo: forigu la sensilojn, la sensiloj devas esti fermitaj antaŭ ĉi tiu operacio.\n"

#. type: Fenced code block
#: ./imp_isp-programigo_gvidilo.md:93
#, no-wrap
msgid ""
"ret = IMP_ISP_DelSensor (& sensor); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"ret = IMP_ISP_DelSensor (& sensor); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: ./imp_isp-programigo_gvidilo.md:101
#, markdown-text, no-wrap
#, fuzzy
msgid ""
"étape 4 : Nettoyer le module ISP, tous les capteurs doivent être supprimés "
"avant cette opération.\n"
msgstr "Paŝo 4: Purigu la ISP-modulon, ĉiuj sensiloj devas esti forigitaj antaŭ ĉi tiu operacio.\n"

#. type: Fenced code block
#: ./imp_isp-programigo_gvidilo.md:102
#, no-wrap
msgid ""
"ret = IMP_ISP_Close ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"ret = IMP_ISP_Close ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Title ##
#: ./imp_isp-programigo_gvidilo.md:112
#, markdown-text, no-wrap
#, fuzzy
msgid "liste des fonctions"
msgstr "listo de funkcioj"

#. type: Plain text
#: ./imp_isp-programigo_gvidilo.md:186
#, markdown-text, no-wrap
#, fuzzy
msgid ""
"int IMP_ISP_Open(void);\n"
"int IMP_ISP_Close(void);\n"
"int IMP_ISP_AddSensor(IMPSensorInfo *pinfo);\n"
"int IMP_ISP_DelSensor(IMPSensorInfo *pinfo);\n"
"int IMP_ISP_EnableSensor(void);\n"
"int IMP_ISP_DisableSensor(void);\n"
"int IMP_ISP_SetSensorRegister(uint32_t reg, uint32_t value);\n"
"int IMP_ISP_GetSensorRegister(uint32_t reg, uint32_t *value);\n"
"int IMP_ISP_EnableTuning(void);\n"
"int IMP_ISP_DisableTuning(void);\n"
"int IMP_ISP_Tuning_SetSensorFPS(uint32_t fps_num, uint32_t fps_den);\n"
"int IMP_ISP_Tuning_GetSensorFPS(uint32_t *fps_num, uint32_t *fps_den);\n"
"int IMP_ISP_Tuning_SetAntiFlickerAttr(IMPISPAntiflickerAttr attr);\n"
"int IMP_ISP_Tuning_GetAntiFlickerAttr(IMPISPAntiflickerAttr *pattr);\n"
"int IMP_ISP_Tuning_SetRawDRC(IMPISPDrcAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetRawDRC(IMPISPDrcAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetTemperDnsCtl(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetWDRAttr(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_GetWDRAttr(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetSceneMode(IMPISPSceneMode mode);\n"
"int IMP_ISP_Tuning_GetSceneMode(IMPISPSceneMode *pmode);\n"
"int IMP_ISP_Tuning_SetColorfxMode(IMPISPColorfxMode mode);\n"
"int IMP_ISP_Tuning_GetColorfxMode(IMPISPColorfxMode *pmode);\n"
"int IMP_ISP_Tuning_SetBrightness(unsigned char bright);\n"
"int IMP_ISP_Tuning_GetBrightness(unsigned char *pbright);\n"
"int IMP_ISP_Tuning_SetContrast(unsigned char contrast);\n"
"int IMP_ISP_Tuning_GetContrast(unsigned char *pcontrast);\n"
"int IMP_ISP_Tuning_SetSharpness(unsigned char sharpness);\n"
"int IMP_ISP_Tuning_GetSharpness(unsigned char *psharpness);\n"
"int IMP_ISP_Tuning_SetSaturation(unsigned char sat);\n"
"int IMP_ISP_Tuning_GetSaturation(unsigned char *psat);\n"
"int IMP_ISP_Tuning_SetISPProcess(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_SetFWFreeze(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_SaveAllParam(char *path);\n"
"int IMP_ISP_Tuning_SetISPBypass(IMPISPTuningOpsMode enable);\n"
"int IMP_ISP_Tuning_GetTotalGain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetISPHflip(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_GetISPHflip(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetISPVflip(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_GetISPVflip(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetISPRunningMode(IMPISPRunningMode mode);\n"
"int IMP_ISP_Tuning_GetISPRunningMode(IMPISPRunningMode *pmode);\n"
"int IMP_ISP_Tuning_SetAeStrategy(IMPISPAeStrategy strategy);\n"
"int IMP_ISP_Tuning_GetAeStrategy(IMPISPAeStrategy *pstrategy);\n"
"int IMP_ISP_Tuning_SetGamma(IMPISPGamma *gamma);\n"
"int IMP_ISP_Tuning_GetGamma(IMPISPGamma *gamma);\n"
"int IMP_ISP_Tuning_SetAeComp(int comp);\n"
"int IMP_ISP_Tuning_GetAeComp(int *comp);\n"
"int IMP_ISP_Tuning_SetExpr(IMPISPExpr *expr);\n"
"int IMP_ISP_Tuning_GetExpr(IMPISPExpr *expr);\n"
"int IMP_ISP_Tuning_AE_GetROI(IMPISPAERoi *isp_ae_roi);\n"
"int IMP_ISP_Tuning_AE_SetROI(IMPISPAERoi *isp_ae_roi);\n"
"int IMP_ISP_Tuning_SetWB(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_GetWB(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_GetWB_Statis(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_Awb_GetCwfShift(IMPISPWB *isp_wb_attr);\n"
"int IMP_ISP_Tuning_Awb_SetCwfShift(IMPISPWB *isp_wb_attr);\n"
"int IMP_ISP_Tuning_SetMaxAgain(uint32_t gain);\n"
"int IMP_ISP_Tuning_GetMaxAgain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetMaxDgain(uint32_t gain);\n"
"int IMP_ISP_Tuning_GetMaxDgain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetVideoDrop(void (*cb)(void));\n"
"int IMP_ISP_Tuning_SetHiLightDepress(uint32_t strength);\n"
"int IMP_ISP_Tuning_SetTemperStrength(uint32_t ratio);\n"
"int IMP_ISP_Tuning_SetSinterStrength(uint32_t ratio);\n"
"int IMP_ISP_Tuning_SetDPStrength(uint32_t ratio);\n"
"int IMP_ISP_Tuning_SetAntiFogAttr(IMPISPAntiFogAttr attr);\n"
"int IMP_ISP_Tuning_GetEVAttr(IMPISPEVAttr *attr);\n"
msgstr "int IMP_ISP_Malferma(malplena);\nint IMP_ISP_Fermi(malplenan);\nint IMP_ISP_AddSensor(IMPSensorInfo *pinfo);\nint IMP_ISP_DelSensor(IMPSensorInfo *pinfo);\nint IMP_ISP_EnableSensor(malplena);\nint IMP_ISP_DisableSensor(malplena);\nint IMP_ISP_SetSensorRegister(uint32_t reg, uint32_t valoro);\nint IMP_ISP_GetSensorRegister(uint32_t reg, uint32_t *valoro);\nint IMP_ISP_EnableTuning(malplena);\nint IMP_ISP_DisableTuning(malplena);\nint IMP_ISP_Agordo_SetSensorFPS(uint32_t fps_num, uint32_t fps_den);\nint IMP_ISP_Tuning_GetSensorFPS(uint32_t *fps_num, uint32_t *fps_den);\nint IMP_ISP_Agordo_SetAntiFlickerAttr(IMPISPAntiflickerAttr attr);\nint IMP_ISP_Tuning_GetAntiFlickerAttr(IMPISPAntiflickerAttr *pattr);\nint IMP_ISP_Agordo_SetRawDRC(IMPISPDrcAttr *pinfo);\nint IMP_ISP_Tuning_GetRawDRC(IMPISPDrcAttr *pinfo);\nint IMP_ISP_Agordo_SetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\nint IMP_ISP_Tuning_GetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\nint IMP_ISP_Agordo_SetTemperDnsCtl(IMPISPTemperDenoiseAttr *pinfo);\nint IMP_ISP_Tuning_SetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\nint IMP_ISP_Agordo_GetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\nint IMP_ISP_Tuning_SetWDRAttr(IMPISPTuningOpsMode mode);\nint IMP_ISP_Agordo_GetWDRAttr(IMPISPTuningOpsMode *pmode);\nint IMP_ISP_Tuning_SetSceneMode(IMPISPSceneMode mode);\nint IMP_ISP_Agordo_GetSceneMode(IMPISPSceneMode *pmode);\nint IMP_ISP_Tuning_SetColorfxMode(IMPISPColorfxMode mode);\nint IMP_ISP_Agordo_GetColorfxMode(IMPISPColorfxMode *pmode);\nint IMP_ISP_Tuning_Agordu Brilecon(sennoma signo brila);\nint IMP_ISP_Agordo_GetBrightness(unsigned char *pbright);\nint IMP_ISP_Tuning_SetContrast(sennoma signokontrasto);\nint IMP_ISP_Agordo_GetContrast(unsigned char *pcontrast);\nint IMP_ISP_Tuning_SetSharpness(sennoma akra akreco);\nint IMP_ISP_Agordo_GetSharpness(unsigned char *psharpness);\nint IMP_ISP_Tuning_SetSaturation(sennoma signo (sat 22 °);\nint IMP_ISP_Agordo_GetSaturation(unsigned char *psat);\nint IMP_ISP_Tuning_SetISPProcess(IMPISPTuningOpsMode mode);\nint IMP_ISP_Agordo_SetFWFreeze(IMPISPTuningOpsMode mode);\nint IMP_ISP_Tuning_SaveAllParam(char *vojo);\nint IMP_ISP_Agordo_SetISPBypass(IMPISPTuningOpsMode enable);\nint IMP_ISP_Tuning_GetTotalGain(uint32_t *gain);\nint IMP_ISP_Tuning_Agordu ISPHflip(IMPISPTuningOpsMode mode);\nint IMP_ISP_Agordo_GetISPHflip(IMPISPTuningOpsMode *pmode);\nint IMP_ISP_Tuning_SetISPVflip(IMPISPTuningOpsMode mode);\nint IMP_ISP_Agordo_GetISPVflip(IMPISPTuningOpsMode *pmode);\nint IMP_ISP_Tuning_SetISPRunningMode(IMPISPRunningMode mode);\nint IMP_ISP_Agordo_GetISPRunningMode(IMPISPRunningMode *pmode);\nint IMP_ISP_Tuning_SetAeStrategy(IMPISPAeStrategy-strategio);\nint IMP_ISP_Agordo_GetAeStrategy(IMPISPAeStrategy *pstrategy);\nint IMP_ISP_Tuning_SetGamma(IMPISPGamma *gama);\nint IMP_ISP_Agordo_GetGamma(IMPISPGamma *gamma);\nint IMP_ISP_Tuning_SetAeComp(int comp);\nint IMP_ISP_Agordo_GetAeComp(int *comp);\nint IMP_ISP_Tuning_SetExpr(IMPISPExpr *ekspr);\nint IMP_ISP_Agordo_GetExpr(IMPISPExpr *expr);\nint IMP_ISP_Tuning_AE_GetROI(IMPISPAERoi *isp_ae_roi);\nint IMP_ISP_Tuning_AE_SetROI(IMPISPAERoi *isp_ae_roi);\nint IMP_ISP_Tuning_SetWB(IMPISPWB *wb);\nint IMP_ISP_Agordo_GetWB(IMPISPWB *wb);\nint IMP_ISP_Tuning_GetWB_Statis(IMPISPWB *wb);\nint IMP_ISP_Tuning_Awb_GetCwfShift(IMPISPWB *isp_wb_attr);\nint IMP_ISP_Tuning_Awb_SetCwfShift(IMPISPWB *isp_wb_attr);\nint IMP_ISP_Tuning_SetMaxAgain(uint32_t gain);\nint IMP_ISP_Tuning_GetMaxAgain(uint32_t *gain);\nint IMP_ISP_Tuning_SetMaxDgain(uint32_t gain);\nint IMP_ISP_Tuning_GetMaxDgain(uint32_t *gain);\nint IMP_ISP_Tuning_SetVideoDrop(malplena (*cb)(malplena));\nint IMP_ISP_Agordo_SetHiLightDepress(uint32_t forto);\nint IMP_ISP_Agordo_SetTemperStrength(uint32_t-proporcio);\nint IMP_ISP_Agordo_SetSinterStrength(uint32_t-proporcio);\nint IMP_ISP_Agordo_SetDPStrength(uint32_t-proporcio);\nint IMP_ISP_Agordo_SetAntiFogAttr(IMPISPAntiFogAttr attr);\nint IMP_ISP_Tuning_GetEVAttr(IMPISPEVAttr *attr);\n"

