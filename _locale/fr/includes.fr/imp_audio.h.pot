# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-04 16:42+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ./includes.fr/imp_audio.h:6
#, markdown-text, no-wrap
msgid ""
"/*\n"
" * Audio utils header file.\n"
" *\n"
" * Copyright (C) 2014 Ingenic Semiconductor Co.,Ltd\n"
" */\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:9
#, markdown-text, no-wrap
msgid ""
"#ifndef __IMP_AUDIO_H__\n"
"#define __IMP_AUDIO_H__\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:11
#, markdown-text, no-wrap
msgid "#include <stdint.h>\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:18
#, markdown-text, no-wrap
msgid ""
"#ifdef __cplusplus\n"
"#if __cplusplus\n"
"extern \"C\"\n"
"{\n"
"#endif\n"
"#endif /* __cplusplus */\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:23
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @file\n"
" * IMP  Fichiers d'en-tête d'entrée et de sortie audio \n"
" */\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:68
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @defgroup IMP_Audio\n"
" * @ingroup imp\n"
" * @brief  Module audio ， Y compris l'enregistrement et la lecture, le codec "
"audio, les paramètres de volume et de gain, l'annulation d'écho, le gain "
"automatique et d'autres fonctions \n"
" *\n"
" * @section audio_summary 1  Aperçu \n"
" *  La fonction audio comprend une entrée audio , Sortie audio , Annulation "
"d'écho , Encodage audio et décodage audio 5 Modules . \\n\n"
" *  Parmi eux, l'entrée audio et la sortie audio ont le concept d'équipement "
"et de canaux . L'un des MIC Nous pensons que c'est un Device, Et une MIC Il "
"peut y avoir plusieurs Channel Entrer . \\n\n"
" *  Le même SPK Nous pensons que c'est une annonce Device, Nous pensons que "
"c'est une annonce SPK Il peut également y avoir plusieurs Channel Production "
". \\n\n"
" *  Audio de la version actuelle API Une Device Prend en charge un seul "
"Channel. \\n\n"
" *  L'annulation de l'écho est située dans l'interface d'entrée audio , Des "
"instructions spécifiques sont reflétées dans la description de la fonction "
". \\n\n"
" *  Codage audio audio actuel API Support moyen PT_G711A [[[ PT_G711U avec "
"PT_G726 Formater l'encodage audio , Si vous devez ajouter une nouvelle "
"méthode d'encodage , Besoin d'enregistrer l'encodeur . \\n\n"
" *  Décodage audio audio actuel API Décodage audio audio actuel PT_G711A "
"Décodage audio audio actuel PT_G711U Décodage audio audio actuel PT_G726 "
"Formater le décodage audio , Si vous devez ajouter une nouvelle méthode de "
"décodage , Besoin d'enregistrer le décodeur . \\n\n"
" * @section audio_function_description 2  Description de la fonction \n"
" *  Ce qui suit est une description spécifique de chaque module \n"
" * @subsection audio_in 2.1  Entrée audio \n"
" *  Entrée audio Device ID  Correspondance , 0:  Numéro correspondant MIC  "
"1:  Simulation correspondante MIC \\n\n"
" *  Simulation correspondante Channel actuel API Supporte uniquement 1 "
"Chaînes . \\n\n"
" *  Réglage du volume d'entrée audio , La plage de volume est [-30 ~ "
"120]. -30 Signifie muet ,120 Moyens d'amplifier le son 30dB, Taille de pas "
"0.5dB. parmi eux 60 Est un point critique pour le réglage du volume ，\\n\n"
" *  Le logiciel n'augmente ni ne diminue le volume à cette valeur ， Lorsque "
"la valeur du volume est inférieure à 60 Temps ， Chaque goutte 1， Baisser le "
"volume 0.5dB ; Lorsque la valeur du volume est supérieure à 60 ; Lorsque la "
"valeur du volume est supérieure à ， Augmenter 1， Augmentation de volume "
"0.5dB . \n"
" * @subsection audio_out 2.2  . \n"
" *  . Device ID  . , 0:  Correspondant à la valeur par défaut SPK 1:  "
"Correspond à d'autres SPK \\n\n"
" *  Correspond à d'autres Channel Correspond à d'autres API Correspond à "
"d'autres 1 Correspond à d'autres . \\n\n"
" *  Réglage du volume de sortie audio , Réglage du volume de sortie audio "
"[-30 ~ 120]. -30 Réglage du volume de sortie audio ,120 Réglage du volume de "
"sortie audio 30dB, Réglage du volume de sortie audio 0.5dB. Réglage du "
"volume de sortie audio 60 Réglage du volume de sortie audio ，\\n\n"
" *  Réglage du volume de sortie audio ， Réglage du volume de sortie audio 60 "
"Réglage du volume de sortie audio ， Réglage du volume de sortie audio 1， "
"Réglage du volume de sortie audio 0.5dB Réglage du volume de sortie audio 60 "
"Réglage du volume de sortie audio ， Réglage du volume de sortie audio 1， "
"Réglage du volume de sortie audio 0.5dB. \\n\n"
" * @subsection audio_aec 2.3  Réglage du volume de sortie audio \n"
" *  L'annulation de l'écho est une fonction de l'interface d'entrée audio , "
"Par conséquent, le périphérique d'entrée audio et le canal doivent être "
"activés avant d'activer l'annulation d'écho . \\n\n"
" *  L'annulation de l'écho prend actuellement en charge le taux "
"d'échantillonnage audio 8K L'annulation de l'écho prend actuellement en "
"charge le taux d'échantillonnage audio 16K， Le nombre d'échantillons de "
"données dans une trame est 10ms Multiples entiers de données audio (tels "
"que: 8K Taux d'échantillonnage ，  Les données envoyées sont: 8000  ×  2 / "
"100 = 160byte Multiples entiers de). \\n\n"
" *  Annulation d'écho pour différents appareils ， Différents forfaits ， "
"L'annulation de l'écho aura des effets différents . \\n\n"
" *  L'annulation d'écho ne prend actuellement pas en charge la fonction "
"adaptative ， Il existe donc des paramètres d'annulation d'écho distincts "
"pour différents appareils , \\n\n"
" *  Le fichier de paramètres pour l'annulation d'écho se trouve dans "
"/etc/webrtc_profile.ini  Fichier de configuration . \\n\n"
" *  Le format du fichier de configuration est le suivant ( Les trois "
"principaux paramètres à déboguer sont répertoriés ci-dessous ): \\n\n"
" * [Set_Far_Frame] \\n\n"
" * Frame_V=0.3 \\n\n"
" * [Set_Near_Frame] \\n\n"
" * Frame_V=0.1 \\n\n"
" * delay_ms=150 \\n\n"
" *\n"
" *  Le premier label [Set_Far_Frame] Le contenu de représente le paramètre "
"distant , lequel est SPK Terminer les paramètres de données de lecture "
". \\n\n"
" * Fram_V  Représente le rapport d'amplitude audio , Ajustez ce paramètre "
"pour ajuster l'amplitude des données de lecture ( Cette amplitude n'est "
"utilisée que pour l'annulation d'écho ). \\n\n"
" *  Cette amplitude n'est utilisée que pour l'annulation d'écho "
"[Set_Near_Frame] Le contenu dans représente le paramètre proche , Le contenu "
"dans représente le paramètre proche MIC Terminer l'enregistrement des "
"paramètres de données . \\n\n"
" * Fram_V  Terminer l'enregistrement des paramètres de données , Ajustez ce "
"paramètre pour ajuster l'amplitude des données enregistrées ( Ajustez ce "
"paramètre pour ajuster l'amplitude des données enregistrées ). \\n\n"
" * delay_ms  En raison du retard du logiciel et du matériel , Et SPK contre "
"MIC Est placé à une certaine distance ,SPK Les données de lecture seront MIC "
"échantillonnage , et donc SPK Données en MIC Il y aura un certain retard "
"dans les données . \\n\n"
" *  Cette heure représente la différence de temps entre les données de "
"lecture et les données d'enregistrement . \\n\n"
msgstr ""

#. type: Bullet: ' * '
#: ./includes.fr/imp_audio.h:75
#, markdown-text, no-wrap
msgid "@subsection audio_enc 2.4  Codage audio \n"
msgstr ""

#. type: Bullet: ' *  '
#: ./includes.fr/imp_audio.h:75
#, markdown-text, no-wrap
msgid ""
"Codage audio audio actuel API Etre prêt PT_G711A Etre prêt PT_G711U Etre "
"prêt PT_G726 Etre prêt , Si vous devez ajouter une nouvelle méthode "
"d'encodage , Besoin d'appeler IMP_AENC_RegisterEncoder Interface pour "
"enregistrer le codeur .\n"
msgstr ""

#. type: Bullet: ' * '
#: ./includes.fr/imp_audio.h:75
#, markdown-text, no-wrap
msgid "@subsection audio_dec 2.5  Décodage audio \n"
msgstr ""

#. type: Bullet: ' *  '
#: ./includes.fr/imp_audio.h:75
#, markdown-text, no-wrap
msgid ""
"Décodage audio audio actuel API Décodage audio audio actuel PT_G711A "
"Décodage audio audio actuel PT_G711U Décodage audio audio actuel PT_G726 "
"Décodage audio audio actuel , Si vous devez ajouter une nouvelle méthode de "
"décodage , Si vous devez ajouter une nouvelle méthode de décodage "
"IMP_ADEC_RegisterDecoder Interface pour enregistrer le décodeur .\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:75
#, markdown-text, no-wrap
msgid ""
" * @{\n"
" */\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:80
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Nombre maximum de tampons de trame audio \n"
" */\n"
"#define MAX_AUDIO_FRAME_NUM 50\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:88
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Type de blocage du flux audio \n"
" */\n"
"typedef enum {\n"
"\tBLOCK = 0,\t\t\t\t/**<  bloquer  */\n"
"\tNOBLOCK = 1,\t\t\t/**<  Non bloquant  */\n"
"} IMPBlock;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:99
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définition du taux d'échantillonnage audio .\n"
" */\n"
"typedef enum {\n"
"\tAUDIO_SAMPLE_RATE_8000\t= 8000,\t\t/**< 8KHz Définition du taux "
"d'échantillonnage audio  */\n"
"\tAUDIO_SAMPLE_RATE_16000 = 16000,\t/**< 16KHz Définition du taux "
"d'échantillonnage audio  */\n"
"\tAUDIO_SAMPLE_RATE_44100 = 44100,\t/**< 44.1KHz Définition du taux "
"d'échantillonnage audio  */\n"
"\tAUDIO_SAMPLE_RATE_48000 = 48000,\t/**< 48KHz Définition du taux "
"d'échantillonnage audio  */\n"
"\tAUDIO_SAMPLE_RATE_96000 = 96000,\t/**< 96KHz Définition du taux "
"d'échantillonnage audio  */\n"
"} IMPAudioSampleRate;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:106
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définition de la précision d'échantillonnage audio .\n"
" */\n"
"typedef enum {\n"
"\tAUDIO_BIT_WIDTH_16 = 16,\t\t/**< 16bit Précision d'échantillonnage  */\n"
"} IMPAudioBitWidth;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:114
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définition du mode de canal audio .\n"
" */\n"
"typedef enum {\n"
"\tAUDIO_SOUND_MODE_MONO\t= 1,\t/**<  Mono  */\n"
"\tAUDIO_SOUND_MODE_STEREO = 2,\t/**<  Deux canaux  */\n"
"} IMPAudioSoundMode;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:127
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définir l'énumération du type de charge utile audio .\n"
" */\n"
"typedef enum {\n"
"\tPT_PCM\t\t= 0,\n"
"\tPT_G711A\t= 1,\n"
"\tPT_G711U\t= 2,\n"
"\tPT_G726 \t= 3,\n"
"\tPT_AEC\t\t= 4,\n"
"\tPT_ADPCM\t= 5,\n"
"\tPT_MAX\t\t= 6,\n"
"} IMPAudioPalyloadType;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:135
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définir la méthode de décodage .\n"
" */\n"
"typedef enum {\n"
"\tADEC_MODE_PACK   = 0,\t/**< Pack  Façon de décoder  */\n"
"\tADEC_MODE_STREAM = 1,\t/**< Stream  Façon de décoder  */\n"
"} IMPAudioDecMode;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:147
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Propriétés du périphérique d'entrée et de sortie audio .\n"
" */\n"
"typedef struct {\n"
"\tIMPAudioSampleRate samplerate;\t\t/**<  Taux d'échantillonnage audio  */\n"
"\tIMPAudioBitWidth bitwidth;\t\t\t/**<  Précision d'échantillonnage audio  "
"*/\n"
"\tIMPAudioSoundMode soundmode;\t\t/**<  Mode canal audio  */\n"
"\tint frmNum;\t\t\t\t\t\t\t/**<  Nombre de trames tamponnées ,  Gammes :[2, "
"MAX_AUDIO_FRAME_NUM] */\n"
"\tint numPerFrm;\t\t\t\t\t\t/**<  Nombre de points d'échantillonnage par "
"trame  */\n"
"\tint chnCnt;\t\t\t\t\t\t\t/**<  Nombre de canaux pris en charge  */\n"
"} IMPAudioIOAttr;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:160
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Structure de trame audio .\n"
" */\n"
"typedef struct {\n"
"\tIMPAudioBitWidth bitwidth;\t\t\t/**<  Structure de trame audio  */\n"
"\tIMPAudioSoundMode soundmode;\t\t/**<  Structure de trame audio  */\n"
"\tuint32_t *virAddr;\t\t\t\t\t/**<  Adresse virtuelle des données de trame "
"audio  */\n"
"\tuint32_t phyAddr;\t\t\t\t\t/**<  Adresse physique des données de trame "
"audio  */\n"
"\tint64_t timeStamp;\t\t\t\t\t/**<  Horodatage des données de trame audio  "
"*/\n"
"\tint seq;\t\t\t\t\t\t\t/**<  Numéro de trame audio  */\n"
"\tint len;\t\t\t\t\t\t\t/**<  Longueur de la trame audio  */\n"
"} IMPAudioFrame;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:168
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Structure des paramètres du canal audio .\n"
" */\n"
"typedef struct {\n"
"\tint usrFrmDepth;\t\t\t\t\t/**<  Profondeur de la mémoire tampon d'image "
"audio  */\n"
"\tint Rev;\t\t\t\t\t\t\t/**<  Garder  */\n"
"} IMPAudioIChnParam;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:177
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Structure de l'état du tampon de données du canal de sortie audio .\n"
" */\n"
"typedef struct {\n"
"\tint chnTotalNum;\t\t\t\t/**<  Le nombre total de blocs tampons du canal de "
"sortie  */\n"
"\tint chnFreeNum;\t\t\t\t\t/**<  Nombre de blocs de cache gratuits  */\n"
"\tint chnBusyNum;\t\t\t\t\t/**<  Nombre de blocs de cache occupés  */\n"
"} IMPAudioOChnState;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:188
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définir la structure du flux audio .\n"
" */\n"
"typedef struct {\n"
"\tuint8_t *stream;\t\t\t\t/**<  Pointeur de flux de données  */\n"
"\tuint32_t phyAddr;\t\t\t\t/**<  Adresse physique du flux de données  */\n"
"\tint len;\t\t\t\t\t\t/**<  Longueur du flux audio  */\n"
"\tint64_t timeStamp;\t\t\t\t/**<  Horodatage  */\n"
"\tint seq;\t\t\t\t\t\t/**<  Numéro de série du flux audio  */\n"
"} IMPAudioStream;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:197
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définir la structure d'attribut du canal de codage audio .\n"
" */\n"
"typedef struct {\n"
"\tIMPAudioPalyloadType type;\t\t\t\t/**<  Type de données de charge utile "
"audio  */\n"
"\tint bufSize;\t\t\t\t\t\t\t/**<  buf  Taille ， Dans les cadres ，[2 ~ "
"MAX_AUDIO_FRAME_NUM] */\n"
"\tuint32_t *value;\t\t\t\t\t\t/**<  Pointeur d'attribut de protocole  */\n"
"} IMPAudioEncChnAttr;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:211
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définir la structure des attributs du codeur .\n"
" */\n"
"typedef struct {\n"
"\tIMPAudioPalyloadType type;\t\t/**<  Type de protocole de codage  */\n"
"\tint maxFrmLen;\t\t\t\t\t/**<  Longueur maximale du flux  */\n"
"\tchar name[16];\t\t\t\t\t/**<  Nom du codeur  */\n"
"\tint (*openEncoder)(void *encoderAttr, void\n"
"\t\t\t*encoder);\n"
"\tint (*encoderFrm)(void *encoder, IMPAudioFrame\n"
"\t\t\t*data, unsigned char *outbuf,int *outLen);\n"
"\tint (*closeEncoder)(void *encoder);\n"
"} IMPAudioEncEncoder;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:221
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définir la structure d'attribut du canal de décodage .\n"
" */\n"
"typedef struct {\n"
"\tIMPAudioPalyloadType type;\t\t\t/**<  Type de protocole de décodage audio  "
"*/\n"
"\tint bufSize;\t\t\t\t\t\t/**<  Taille du tampon de décodage audio  */\n"
"\tIMPAudioDecMode mode;\t\t\t\t/**<  Méthode de décodage  */\n"
"\tvoid *value;\t\t\t\t\t\t/**<  Pointeur d'attribut de protocole spécifique  "
"*/\n"
"} IMPAudioDecChnAttr;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:236
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définir la structure des attributs du décodeur .\n"
" */\n"
"typedef struct {\n"
"\tIMPAudioPalyloadType type;\t\t/**<  Définir la structure des attributs du "
"décodeur  */\n"
"\tchar name[16];\t\t\t\t\t/**<  Nom du décodeur audio  */\n"
"\tint (*openDecoder)(void *decoderAttr, void\n"
"\t\t\t*decoder);\n"
"\tint (*decodeFrm)(void *decoder, unsigned char\n"
"\t\t\t*inbuf,int inLen, unsigned short *outbuf,int\n"
"\t\t\t*outLen,int *chns);\n"
"\tint (*getFrmInfo)(void *decoder, void *info);\n"
"\tint (*closeDecoder)(void *decoder);\n"
"} IMPAudioDecDecoder;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:244
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  définition AGC Structure de gain .\n"
" */\n"
"typedef struct {\n"
"\tint TargetLevelDbfs;\t/**<  Niveau de gain , La valeur est [0, 31],  Cela "
"fait référence au niveau de volume cible , l'unité est db, Négatif . Plus la "
"valeur est petite , Plus fort . */\n"
"\tint CompressionGaindB;\t/**<  Définir la valeur de gain maximum ,[0, 90],0 "
"Signifie pas de gain , Valeur plus élevée , Gain plus élevé . */\n"
"} IMPAudioAgcConfig;\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:254
#, markdown-text, no-wrap
msgid ""
"/**\n"
" *  Définir le niveau de suppression du bruit .\n"
" */\n"
"enum Level_ns {\n"
"\tNS_LOW,\t\t\t/**<  Suppression du bruit de bas niveau  */\n"
"\tNS_MODERATE,\t/**<  Suppression du bruit de niveau moyen  */\n"
"\tNS_HIGH,\t\t/**<  Suppression du bruit de haut niveau  */\n"
"\tNS_VERYHIGH\t\t/**<  Le plus haut niveau de suppression du bruit  */\n"
"};\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:286
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_SetPubAttr(int audioDevId, IMPAudioIOAttr *attr)\n"
" *\n"
" *  Définir les propriétés du périphérique d'entrée audio .\n"
" *\n"
" * @param[in] audioDevId  Numéro du périphérique audio .\n"
" * @param[in] attr  Pointeur d'attribut de périphérique audio .\n"
" *\n"
" * @retval 0  Succès .\n"
" * @retval  non- 0  échec .\n"
" *\n"
" * @remarks  Exemple de code \n"
" * @code\n"
" * int devID = 1;\n"
" * IMPAudioIOAttr attr;\n"
" * attr.samplerate = AUDIO_SAMPLE_RATE_8000;\n"
" * attr.bitwidth = AUDIO_BIT_WIDTH_16;\n"
" * attr.soundmode = AUDIO_SOUND_MODE_MONO;\n"
" * attr.frmNum = 20;\n"
" * attr.numPerFrm = 400;\n"
" * attr.chnCnt = 1;\n"
" * ret = IMP_AI_SetPubAttr(devID, &attr);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"Set Audio in %d attr err: %d\\n\", devID, ret);\n"
" *\t\treturn ret;\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  Besoin d'être dans IMP_AI_Enable Appelez avant .\n"
" */\n"
"int IMP_AI_SetPubAttr(int audioDevId, IMPAudioIOAttr *attr);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:303
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_GetPubAttr(int audioDevId, IMPAudioIOAttr *attr)\n"
" *\n"
" *  Obtenir les propriétés du périphérique d'entrée audio .\n"
" *\n"
" * @param[in] audioDevId  Obtenir les propriétés du périphérique d'entrée "
"audio .\n"
" * @param[out] attr  Obtenir les propriétés du périphérique d'entrée audio "
".\n"
" *\n"
" * @retval 0  Obtenir les propriétés du périphérique d'entrée audio .\n"
" * @retval  Obtenir les propriétés du périphérique d'entrée audio 0  Obtenir "
"les propriétés du périphérique d'entrée audio .\n"
" *\n"
" * @remarks  non .\n"
" *\n"
" * @attention  non .\n"
" */\n"
"int IMP_AI_GetPubAttr(int audioDevId, IMPAudioIOAttr *attr);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:319
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_Enable(int audioDevId)\n"
" *\n"
" *  Activer le périphérique d'entrée audio .\n"
" *\n"
" * @param[in] audioDevId  Activer le périphérique d'entrée audio .\n"
" *\n"
" * @retval 0  Activer le périphérique d'entrée audio .\n"
" * @retval  Activer le périphérique d'entrée audio 0  Activer le "
"périphérique d'entrée audio .\n"
" *\n"
" * @remarks  Activer le périphérique d'entrée audio .\n"
" *\n"
" * @attention  Doit être appelé avant d'appeler cette fonction  "
"IMP_AI_SetPubAttr().\n"
" */\n"
"int IMP_AI_Enable(int audioDevId);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:335
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_Disable(int audioDevId)\n"
" *\n"
" *  Désactiver le périphérique d'entrée audio .\n"
" *\n"
" * @param[in] audioDevId  Désactiver le périphérique d'entrée audio .\n"
" *\n"
" * @retval 0  Désactiver le périphérique d'entrée audio .\n"
" * @retval  Désactiver le périphérique d'entrée audio 0  Désactiver le "
"périphérique d'entrée audio .\n"
" *\n"
" * @remarks  Désactiver le périphérique d'entrée audio .\n"
" *\n"
" * @attention  Désactiver le périphérique d'entrée audio IMP_AI_Enable "
"Soutenir l'utilisation de , Doit être exécuté avant que le système ne se "
"mette en veille IMP_AI_Disable.\n"
" */\n"
"int IMP_AI_Disable(int audioDevId);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:352
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_EnableChn(int audioDevId, int aiChn)\n"
" *\n"
" *  Activer le canal d'entrée audio .\n"
" *\n"
" * @param[in] audioDevId  Activer le canal d'entrée audio .\n"
" * @param[in] aiChn  Numéro de canal d'entrée audio .\n"
" *\n"
" * @retval 0  Numéro de canal d'entrée audio .\n"
" * @retval  Numéro de canal d'entrée audio 0  Numéro de canal d'entrée audio "
".\n"
" *\n"
" * @remarks  Numéro de canal d'entrée audio .\n"
" *\n"
" * @attention  Doit être activé en premier device.\n"
" */\n"
"int IMP_AI_EnableChn(int audioDevId, int aiChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:369
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_DisableChn(int audioDevId, int aiChn)\n"
" *\n"
" *  Désactiver le canal d'entrée audio .\n"
" *\n"
" * @param[in] audioDevId  Désactiver le canal d'entrée audio .\n"
" * @param[in] aiChn  Désactiver le canal d'entrée audio .\n"
" *\n"
" * @retval 0  Désactiver le canal d'entrée audio .\n"
" * @retval  Désactiver le canal d'entrée audio 0  Désactiver le canal "
"d'entrée audio .\n"
" *\n"
" * @remarks  Désactiver le canal d'entrée audio .\n"
" *\n"
" * @attention  Désactiver le canal d'entrée audio IMP_AI_EnableChn "
"Désactiver le canal d'entrée audio .\n"
" */\n"
"int IMP_AI_DisableChn(int audioDevId, int aiChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:388
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_PollingFrame(int audioDevId, int aiChn, unsigned int "
"timeout_ms)\n"
" *\n"
" * Polling Tampon de flux audio .\n"
" *\n"
" * @param[in] audioDevId  Tampon de flux audio .\n"
" * @param[in] aiChn  Tampon de flux audio .\n"
" * @param[in] timeout_ms Polling temps supplémentaire .\n"
" *\n"
" * @retval 0  temps supplémentaire .\n"
" * @retval  temps supplémentaire 0  temps supplémentaire .\n"
" *\n"
" * @remarks  temps supplémentaire .\n"
" *\n"
" * @attention  Utilisé IMP_AI_GetFrame L'interface était utilisée avant ， "
"Lorsque l'interface est appelée avec succès, cela signifie audio \n"
" *\t\t\t   Les données sont prêtes ， peut utiliser IMP_AI_GetFrame Obtenez "
"des données audio .\n"
" */\n"
"int IMP_AI_PollingFrame(int audioDevId, int aiChn, unsigned int "
"timeout_ms);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:425
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_GetFrame(int audioDevId, int aiChn, IMPAudioFrame *frm, "
"IMPBlock block)\n"
" *\n"
" *  Obtenir une image audio .\n"
" *\n"
" * @param[in] audioDevId  Obtenir une image audio .\n"
" * @param[in] aiChn  Obtenir une image audio .\n"
" * @param[out] frm  Pointeur de structure de trame audio .\n"
" * @param[in] block  Pointeur de structure de trame audio / Drapeau non "
"bloquant .\n"
" *\n"
" * @retval 0  Drapeau non bloquant .\n"
" * @retval  Drapeau non bloquant 0  Drapeau non bloquant .\n"
" *\n"
" * @remarks  Drapeau non bloquant \n"
" * @code\n"
" * IMPAudioFrame frm;\n"
" * //  Drapeau non bloquant \n"
" * ret = IMP_AI_GetFrame(devID, chnID, &frm, BLOCK);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"Audio Get Frame Data error\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" *\n"
" * fwrite(frm.virAddr, 1, frm.len, record_file); //  Utiliser les données de "
"trame audio \n"
" *\n"
" * //  Libérer le cadre audio \n"
" * ret = IMP_AI_ReleaseFrame(devID, chnID, &frm);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"Audio release frame data error\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  Libérer le cadre audio .\n"
" */\n"
"int IMP_AI_GetFrame(int audioDevId, int aiChn, IMPAudioFrame *frm, IMPBlock "
"block);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:443
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_ReleaseFrame(int audioDevId, int aiChn, IMPAudioFrame "
"*frm)\n"
" *\n"
" *  Libérer le cadre audio .\n"
" *\n"
" * @param[in] audioDevId  Libérer le cadre audio .\n"
" * @param[in] aiChn  Libérer le cadre audio .\n"
" * @param[in] frm  Libérer le cadre audio .\n"
" *\n"
" * @retval 0  Libérer le cadre audio .\n"
" * @retval  Libérer le cadre audio 0  Libérer le cadre audio .\n"
" *\n"
" * @remarks  Libérer le cadre audio .\n"
" *\n"
" * @attention  Libérer le cadre audio IMP_AI_GetFrame Libérer le cadre audio "
".\n"
" */\n"
"int IMP_AI_ReleaseFrame(int audioDevId, int aiChn, IMPAudioFrame *frm);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:471
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_SetChnParam(int audioDevId, int aiChn, IMPAudioIChnParam "
"*chnParam)\n"
" *\n"
" *  Définir les paramètres du canal d'entrée audio .\n"
" *\n"
" * @param[in] audioDevId  Définir les paramètres du canal d'entrée audio .\n"
" * @param[in] aiChn  Définir les paramètres du canal d'entrée audio .\n"
" * @param[in] chnParam  Paramètres du canal audio .\n"
" *\n"
" * @retval 0  Paramètres du canal audio .\n"
" * @retval  Paramètres du canal audio 0  Paramètres du canal audio .\n"
" *\n"
" * @remarks  Paramètres du canal audio \n"
" * @code\n"
" * int chnID = 0;\n"
" * IMPAudioIChnParam chnParam;\n"
" * chnParam.usrFrmDepth = 20;\t// the range of valid value is [2, "
"MAX_AUDIO_FRAME_NUM].\n"
" * ret = IMP_AI_SetChnParam(devID, chnID, &chnParam);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"set ai %d channel %d attr err: %d\\n\", devID, "
"chnID, ret);\n"
" *\t\treturn ret;\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  dans IMP_AI_EnableChn dans .\n"
" */\n"
"int IMP_AI_SetChnParam(int audioDevId, int aiChn, IMPAudioIChnParam "
"*chnParam);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:489
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_GetChnParam(int audioDevId, int aiChn, IMPAudioIChnParam "
"*chnParam)\n"
" *\n"
" *  Obtenir les paramètres du canal d'entrée audio .\n"
" *\n"
" * @param[in] audioDevId  Obtenir les paramètres du canal d'entrée audio .\n"
" * @param[in] aiChn  Obtenir les paramètres du canal d'entrée audio .\n"
" * @param[out] chnParam  Obtenir les paramètres du canal d'entrée audio .\n"
" *\n"
" * @retval 0  Obtenir les paramètres du canal d'entrée audio .\n"
" * @retval  Obtenir les paramètres du canal d'entrée audio 0  Obtenir les "
"paramètres du canal d'entrée audio .\n"
" *\n"
" * @remarks  Obtenir les paramètres du canal d'entrée audio .\n"
" *\n"
" * @attention  Obtenir les paramètres du canal d'entrée audio .\n"
" */\n"
"int IMP_AI_GetChnParam(int audioDevId, int aiChn, IMPAudioIChnParam "
"*chnParam);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:525
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_EnableAec(int aiDevId, int aiChn, int aoDevId, int "
"aoChn)\n"
" *\n"
" *  Activer la fonction d'annulation d'écho de l'entrée audio et de la "
"sortie audio spécifiées .\n"
" *\n"
" * @param[in] aiDevId  Numéro de périphérique d'entrée audio nécessitant une "
"annulation d'écho .\n"
" * @param[in] aiChn  Numéro de canal d'entrée audio nécessitant une "
"annulation d'écho .\n"
" * @param[in] aoDevId  Numéro du périphérique de sortie audio nécessitant "
"une annulation d'écho .\n"
" * @param[in] aoChn  Numéro de canal de sortie audio nécessitant une "
"annulation d'écho .\n"
" *\n"
" * @retval 0  Numéro de canal de sortie audio nécessitant une annulation "
"d'écho .\n"
" * @retval  Numéro de canal de sortie audio nécessitant une annulation "
"d'écho 0  Numéro de canal de sortie audio nécessitant une annulation d'écho "
".\n"
" *\n"
" * @remarks  Numéro de canal de sortie audio nécessitant une annulation "
"d'écho ， Numéro de canal de sortie audio nécessitant une annulation d'écho ， "
"Numéro de canal de sortie audio nécessitant une annulation d'écho .\n"
" * @remarks  Numéro de canal de sortie audio nécessitant une annulation "
"d'écho ， Numéro de canal de sortie audio nécessitant une annulation d'écho "
",\n"
" * @remarks  Le simple fait d'activer la fonction n'est pas nécessairement "
"bon. \n"
" * @remarks  Le simple fait d'activer la fonction n'est pas nécessairement "
"bon. /etc/webrtc_profile.ini  Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. .\n"
" * @remarks  Le simple fait d'activer la fonction n'est pas nécessairement "
"bon. ( Le simple fait d'activer la fonction n'est pas nécessairement "
"bon. ):\n"
" * @remarks [Set_Far_Frame]\n"
" * @remarks Frame_V=0.3\n"
" * @remarks [Set_Near_Frame]\n"
" * @remarks Frame_V=0.1\n"
" * @remarks delay_ms=150\n"
" *\n"
" * @remarks  Le simple fait d'activer la fonction n'est pas nécessairement "
"bon. [Set_Far_Frame] Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. , Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. SPK Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. .\n"
" * @remarks Fram_V  Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. , Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. ( Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. ).\n"
" * @remarks  Le simple fait d'activer la fonction n'est pas nécessairement "
"bon. [Set_Near_Frame] Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. , Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. MIC Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. .\n"
" * @remarks Fram_V  Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. , Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. ( Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. ).\n"
" * @remarks delay_ms  Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. , Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. SPK Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. MIC Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. ,SPK Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. MIC Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. , Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. SPK Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. MIC Le simple fait d'activer la fonction n'est pas "
"nécessairement bon. .\n"
" * @remarks  Le simple fait d'activer la fonction n'est pas nécessairement "
"bon. .\n"
" *\n"
" * @attention  En fait, l'interface ne vérifiera que aiDevId En fait, "
"l'interface ne vérifiera que aiChn. Mais il est préférable d'appeler une "
"fois que les deux canaux sont activés en même temps . \\n\n"
" *  Lors de la fermeture du canal d'entrée audio , La fonction d'annulation "
"d'écho est désactivée en même temps . Si vous devez l'utiliser à nouveau, "
"vous devez l'ouvrir à nouveau .\n"
" */\n"
"int IMP_AI_EnableAec(int aiDevId, int aiChn, int aoDevId, int aoChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:542
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_DisableAec(int aiDevId, int aiChn)\n"
" *\n"
" *  Désactiver l'annulation d'écho .\n"
" *\n"
" * @param[in] aiDevId  Numéro de périphérique d'entrée audio .\n"
" * @param[in] aiChn  Numéro de périphérique d'entrée audio .\n"
" *\n"
" * @retval 0  Numéro de périphérique d'entrée audio .\n"
" * @retval  Numéro de périphérique d'entrée audio 0  Numéro de périphérique "
"d'entrée audio .\n"
" *\n"
" * @remarks  Numéro de périphérique d'entrée audio .\n"
" *\n"
" * @attention  Numéro de périphérique d'entrée audio .\n"
" */\n"
"int IMP_AI_DisableAec(int aiDevId, int aiChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:561
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_EnableNs(IMPAudioIOAttr *attr, int mode)\n"
" *\n"
" *  Activer la fonction de suppression du bruit de l'entrée audio spécifiée "
".\n"
" *\n"
" * @param[in] attr  Attributs audio nécessitant une suppression du bruit .\n"
" * @param[in] mode  Niveau de suppression du bruit 0  Niveau de suppression "
"du bruit  3, Voir  Level_ns.\n"
" *\n"
" * @retval 0  Voir .\n"
" * @retval  Voir 0  Voir .\n"
" *\n"
" * @remarks  Bruit supprimé mode Le paramètre indique le niveau de "
"suppression du bruit , La plage est [0 ~ 3], Plus le niveau est élevé , Le "
"plus propre la suppression du bruit .\n"
" * @remarks  toutefois , Plus la suppression du bruit est propre, plus les "
"détails sonores seront perdus , Il y a donc une contradiction ici , Il y a "
"donc une contradiction ici \n"
" * @remarks  Faites des compromis lors de l'utilisation .\n"
" *\n"
" * @attention  L'annulation de l'écho inclut la suppression du bruit , Si "
"l'annulation d'écho est activée , Pas besoin de supprimer le bruit .\n"
" */\n"
"int IMP_AI_EnableNs(IMPAudioIOAttr *attr, int mode);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:577
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_DisableNs(void)\n"
" *\n"
" *  Désactiver la suppression du bruit .\n"
" *\n"
" * @param  Désactiver la suppression du bruit .\n"
" *\n"
" * @retval 0  Désactiver la suppression du bruit .\n"
" * @retval  Désactiver la suppression du bruit 0  Désactiver la suppression "
"du bruit .\n"
" *\n"
" * @remarks  Désactiver la suppression du bruit .\n"
" *\n"
" * @attention  Désactiver la suppression du bruit .\n"
" */\n"
"int IMP_AI_DisableNs(void);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:595
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_EnableAgc(IMPAudioIOAttr *attr, IMPAudioAgcConfig "
"agcConfig)\n"
" *\n"
" *  Activer la fonction de gain automatique de l'entrée audio .\n"
" *\n"
" * @param[in] attr  Attributs audio nécessitant un gain automatique .\n"
" * @param[in] agcConfig  Configuration des paramètres du gain automatique , "
"Configurer le grossissement .\n"
" *\n"
" * @retval 0  Configurer le grossissement .\n"
" * @retval  Configurer le grossissement 0  Configurer le grossissement .\n"
" *\n"
" * @remarks  nécessite de l'attention agcConfig Configuration ,AGC Le "
"grossissement a principalement la configuration des paramètres , Voir pour "
"des gains spécifiques IMPAudioAgcConfig Description .\n"
" * @remarks  doit être conscient de ,AGC Peut amplifier le gain du son , "
"Mais si le paramètre de gain ne convient pas , Cela provoquera la rupture du "
"son, etc. , Veuillez vous ajuster lorsque vous l'utilisez .\n"
" *\n"
" * @attention  L'annulation de l'écho comprend  AGC  Fonctionnalités , "
"Fonctionnalités , Pas besoin de faire de gain automatique .\n"
" */\n"
"int IMP_AI_EnableAgc(IMPAudioIOAttr *attr, IMPAudioAgcConfig agcConfig);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:611
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_DisableAgc(void)\n"
" *\n"
" *  Désactiver AI Fonction de gain automatique .\n"
" *\n"
" * @param  Fonction de gain automatique .\n"
" *\n"
" * @retval 0  Fonction de gain automatique .\n"
" * @retval  Fonction de gain automatique 0  Fonction de gain automatique .\n"
" *\n"
" * @remarks  Fonction de gain automatique .\n"
" *\n"
" * @attention  Fonction de gain automatique .\n"
" */\n"
"int IMP_AI_DisableAgc(void);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:629
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_EnableAgc(IMPAudioIOAttr *attr, IMPAudioAgcConfig "
"agcConfig)\n"
" *\n"
" *  Activer la fonction de gain automatique de la sortie audio .\n"
" *\n"
" * @param[in] attr  Activer la fonction de gain automatique de la sortie "
"audio .\n"
" * @param[in] agcConfig  Activer la fonction de gain automatique de la "
"sortie audio , Activer la fonction de gain automatique de la sortie audio "
".\n"
" *\n"
" * @retval 0  Activer la fonction de gain automatique de la sortie audio .\n"
" * @retval  Activer la fonction de gain automatique de la sortie audio 0  "
"Activer la fonction de gain automatique de la sortie audio .\n"
" *\n"
" * @remarks  Activer la fonction de gain automatique de la sortie audio "
"agcConfig Activer la fonction de gain automatique de la sortie audio ,AGC "
"Activer la fonction de gain automatique de la sortie audio , Activer la "
"fonction de gain automatique de la sortie audio IMPAudioAgcConfig Activer la "
"fonction de gain automatique de la sortie audio .\n"
" * @remarks  Activer la fonction de gain automatique de la sortie audio ,AGC "
"Activer la fonction de gain automatique de la sortie audio , Activer la "
"fonction de gain automatique de la sortie audio , Activer la fonction de "
"gain automatique de la sortie audio , Activer la fonction de gain "
"automatique de la sortie audio .\n"
" *\n"
" * @attention  Activer la fonction de gain automatique de la sortie audio  "
"AGC  Activer la fonction de gain automatique de la sortie audio , Activer la "
"fonction de gain automatique de la sortie audio , Activer la fonction de "
"gain automatique de la sortie audio .\n"
" */\n"
"int IMP_AO_EnableAgc(IMPAudioIOAttr *attr, IMPAudioAgcConfig agcConfig);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:645
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_DisableAgc(void)\n"
" *\n"
" *  Activer la fonction de gain automatique de la sortie audio AO Activer la "
"fonction de gain automatique de la sortie audio .\n"
" *\n"
" * @param  Activer la fonction de gain automatique de la sortie audio .\n"
" *\n"
" * @retval 0  Activer la fonction de gain automatique de la sortie audio .\n"
" * @retval  Activer la fonction de gain automatique de la sortie audio 0  "
"Activer la fonction de gain automatique de la sortie audio .\n"
" *\n"
" * @remarks  Activer la fonction de gain automatique de la sortie audio .\n"
" *\n"
" * @attention  Activer la fonction de gain automatique de la sortie audio "
".\n"
" */\n"
"int IMP_AO_DisableAgc(void);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:661
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_EnableHpf(IMPAudioIOAttr *attr)\n"
" *\n"
" *  Activer le filtrage passe-haut de l'entrée audio .\n"
" *\n"
" * @param[in] attr  Attributs audio nécessitant un filtrage passe-haut .\n"
" *\n"
" * @retval 0  Attributs audio nécessitant un filtrage passe-haut .\n"
" * @retval  Attributs audio nécessitant un filtrage passe-haut 0  Attributs "
"audio nécessitant un filtrage passe-haut .\n"
" *\n"
" * @remarks  Attributs audio nécessitant un filtrage passe-haut .\n"
" *\n"
" * @attention  Attributs audio nécessitant un filtrage passe-haut  HPF  "
"Attributs audio nécessitant un filtrage passe-haut , Attributs audio "
"nécessitant un filtrage passe-haut , Pas besoin de faire  HPF.\n"
" */\n"
"int IMP_AI_EnableHpf(IMPAudioIOAttr *attr);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:677
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_DisableHpf(void)\n"
" *\n"
" *  Pas besoin de faire AI Fonction de filtre passe-haut .\n"
" *\n"
" * @param  Fonction de filtre passe-haut .\n"
" *\n"
" * @retval 0  Fonction de filtre passe-haut .\n"
" * @retval  Fonction de filtre passe-haut 0  Fonction de filtre passe-haut "
".\n"
" *\n"
" * @remarks  Fonction de filtre passe-haut .\n"
" *\n"
" * @attention  Fonction de filtre passe-haut .\n"
" */\n"
"int IMP_AI_DisableHpf(void);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:693
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_EnableHpf(IMPAudioIOAttr *attr)\n"
" *\n"
" *  Activer le filtrage passe-haut de la sortie audio .\n"
" *\n"
" * @param[in] attr  Activer le filtrage passe-haut de la sortie audio .\n"
" *\n"
" * @retval 0  Activer le filtrage passe-haut de la sortie audio .\n"
" * @retval  Activer le filtrage passe-haut de la sortie audio 0  Activer le "
"filtrage passe-haut de la sortie audio .\n"
" *\n"
" * @remarks  Activer le filtrage passe-haut de la sortie audio .\n"
" *\n"
" * @attention  Activer le filtrage passe-haut de la sortie audio  HPF  "
"Activer le filtrage passe-haut de la sortie audio , Activer le filtrage "
"passe-haut de la sortie audio , Activer le filtrage passe-haut de la sortie "
"audio  HPF.\n"
" */\n"
"int IMP_AO_EnableHpf(IMPAudioIOAttr *attr);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:709
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_DisableHpf(void)\n"
" *\n"
" *  Activer le filtrage passe-haut de la sortie audio AO Activer le filtrage "
"passe-haut de la sortie audio .\n"
" *\n"
" * @param  Activer le filtrage passe-haut de la sortie audio .\n"
" *\n"
" * @retval 0  Activer le filtrage passe-haut de la sortie audio .\n"
" * @retval  Activer le filtrage passe-haut de la sortie audio 0  Activer le "
"filtrage passe-haut de la sortie audio .\n"
" *\n"
" * @remarks  Activer le filtrage passe-haut de la sortie audio .\n"
" *\n"
" * @attention  Activer le filtrage passe-haut de la sortie audio .\n"
" */\n"
"int IMP_AO_DisableHpf(void);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:726
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_SetPubAttr(int audioDevId, IMPAudioIOAttr *attr)\n"
" *\n"
" *  Définir les propriétés du périphérique d'entrée et de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Définir les propriétés du périphérique d'entrée et "
"de sortie audio .\n"
" * @param[in] attr  Pointeur d'attribut du périphérique de sortie audio .\n"
" *\n"
" * @retval 0  Pointeur d'attribut du périphérique de sortie audio .\n"
" * @retval  Pointeur d'attribut du périphérique de sortie audio 0  Pointeur "
"d'attribut du périphérique de sortie audio .\n"
" *\n"
" * @remarks  Pointeur d'attribut du périphérique de sortie audio .\n"
" *\n"
" * @attention  Pointeur d'attribut du périphérique de sortie audio .\n"
" */\n"
"int IMP_AO_SetPubAttr(int audioDevId, IMPAudioIOAttr *attr);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:743
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_GetPubAttr(int audioDevId, IMPAudioIOAttr *attr)\n"
" *\n"
" *  Obtenir les propriétés du périphérique d'entrée et de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Obtenir les propriétés du périphérique d'entrée et "
"de sortie audio .\n"
" * @param[out] attr  Obtenir les propriétés du périphérique d'entrée et de "
"sortie audio .\n"
" *\n"
" * @retval 0  Obtenir les propriétés du périphérique d'entrée et de sortie "
"audio .\n"
" * @retval  Obtenir les propriétés du périphérique d'entrée et de sortie "
"audio 0  Obtenir les propriétés du périphérique d'entrée et de sortie audio "
".\n"
" *\n"
" * @remarks  Obtenir les propriétés du périphérique d'entrée et de sortie "
"audio .\n"
" *\n"
" * @attention  Obtenir les propriétés du périphérique d'entrée et de sortie "
"audio .\n"
" */\n"
"int IMP_AO_GetPubAttr(int audioDevId, IMPAudioIOAttr *attr);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:759
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_Enable(int audioDevId)\n"
" *\n"
" *  Activer le périphérique de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Activer le périphérique de sortie audio .\n"
" *\n"
" * @retval 0  Activer le périphérique de sortie audio .\n"
" * @retval  Activer le périphérique de sortie audio 0  Activer le "
"périphérique de sortie audio .\n"
" *\n"
" * @remarks  Activer le périphérique de sortie audio .\n"
" *\n"
" * @attention  Doit être appelé avant l'activation IMP_AO_SetPubAttr.\n"
" */\n"
"int IMP_AO_Enable(int audioDevId);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:775
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_Disable(int audioDevId)\n"
" *\n"
" *  Désactiver le périphérique de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Désactiver le périphérique de sortie audio .\n"
" *\n"
" * @retval 0  Désactiver le périphérique de sortie audio .\n"
" * @retval  Désactiver le périphérique de sortie audio 0  Désactiver le "
"périphérique de sortie audio .\n"
" *\n"
" * @remarks  Désactiver le périphérique de sortie audio .\n"
" *\n"
" * @attention  Désactiver le périphérique de sortie audio .\n"
" */\n"
"int IMP_AO_Disable(int audioDevId);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:792
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_EnableChn(int audioDevId, int aoChn)\n"
" *\n"
" *  Activer le canal de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Activer le canal de sortie audio .\n"
" * @param[in] aoChn  Numéro de canal de sortie audio .\n"
" *\n"
" * @retval 0  Numéro de canal de sortie audio .\n"
" * @retval  Numéro de canal de sortie audio 0  Numéro de canal de sortie "
"audio .\n"
" *\n"
" * @remarks  Numéro de canal de sortie audio .\n"
" *\n"
" * @attention  Numéro de canal de sortie audio .\n"
" */\n"
"int IMP_AO_EnableChn(int audioDevId, int aoChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:809
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_DisableChn(int audioDevId, int aoChn)\n"
" *\n"
" *  Désactiver le canal de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Désactiver le canal de sortie audio .\n"
" * @param[in] aoChn  Désactiver le canal de sortie audio .\n"
" *\n"
" * @retval 0  Désactiver le canal de sortie audio .\n"
" * @retval  Désactiver le canal de sortie audio 0  Désactiver le canal de "
"sortie audio .\n"
" *\n"
" * @remarks  Désactiver le canal de sortie audio .\n"
" *\n"
" * @attention  Désactiver le canal de sortie audio .\n"
" */\n"
"int IMP_AO_DisableChn(int audioDevId, int aoChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:844
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_SendFrame(int audioDevId, int aoChn, IMPAudioFrame *data, "
"IMPBlock block)\n"
" *\n"
" *  Envoyer une trame de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Envoyer une trame de sortie audio .\n"
" * @param[in] aoChn  Envoyer une trame de sortie audio .\n"
" * @param[in] data  Envoyer une trame de sortie audio .\n"
" * @param[in] block  Envoyer une trame de sortie audio / Envoyer une trame "
"de sortie audio .\n"
" *\n"
" * @retval 0  Envoyer une trame de sortie audio .\n"
" * @retval  Envoyer une trame de sortie audio 0  Envoyer une trame de sortie "
"audio .\n"
" *\n"
" * @remarks  Envoyer une trame de sortie audio \n"
" * @code\n"
" * while(1) {\n"
" *\t\tsize = fread(buf, 1, IMP_AUDIO_BUF_SIZE, play_file);\n"
" *\t\tif(size < IMP_AUDIO_BUF_SIZE)\n"
" *\t\t\tbreak;\n"
" *\n"
" *\t\tIMPAudioFrame frm;\n"
" *\t\tfrm.virAddr = (uint32_t *)buf;\n"
" *\t\tfrm.len = size;\n"
" *\t\tret = IMP_AO_SendFrame(devID, chnID, &frm, BLOCK);\n"
" *\t\tif(ret != 0) {\n"
" *\t\t\tIMP_LOG_ERR(TAG, \"send Frame Data error\\n\");\n"
" *\t\t\treturn ret;\n"
" *\t\t}\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  Envoyer une trame de sortie audio .\n"
" */\n"
"int IMP_AO_SendFrame(int audioDevId, int aoChn, IMPAudioFrame *data, "
"IMPBlock block);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:861
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_PauseChn(int audioDevId, int aoChn)\n"
" *\n"
" *  Suspendre le canal de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Suspendre le canal de sortie audio .\n"
" * @param[in] aoChn  Suspendre le canal de sortie audio .\n"
" *\n"
" * @retval 0  Suspendre le canal de sortie audio .\n"
" * @retval  Suspendre le canal de sortie audio 0  Suspendre le canal de "
"sortie audio .\n"
" *\n"
" * @remarks  Suspendre le canal de sortie audio .\n"
" *\n"
" * @attention  Suspendre le canal de sortie audio .\n"
" */\n"
"int IMP_AO_PauseChn(int audioDevId, int aoChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:878
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_ResumeChn(int audioDevId, int aoChn)\n"
" *\n"
" *  Restaurer le canal de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Restaurer le canal de sortie audio .\n"
" * @param[in] aoChn  Restaurer le canal de sortie audio .\n"
" *\n"
" * @retval 0  Restaurer le canal de sortie audio .\n"
" * @retval  Restaurer le canal de sortie audio 0  Restaurer le canal de "
"sortie audio .\n"
" *\n"
" * @remarks  Restaurer le canal de sortie audio .\n"
" *\n"
" * @attention  Restaurer le canal de sortie audio .\n"
" */\n"
"int IMP_AO_ResumeChn(int audioDevId, int aoChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:895
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_ClearChnBuf(int audioDevId, int aoChn)\n"
" *\n"
" *  Effacer le tampon de données audio actuel dans le canal de sortie audio "
".\n"
" *\n"
" * @param[in] audioDevId  Effacer le tampon de données audio actuel dans le "
"canal de sortie audio .\n"
" * @param[in] aoChn  Effacer le tampon de données audio actuel dans le canal "
"de sortie audio .\n"
" *\n"
" * @retval 0  Effacer le tampon de données audio actuel dans le canal de "
"sortie audio .\n"
" * @retval  Effacer le tampon de données audio actuel dans le canal de "
"sortie audio 0  Effacer le tampon de données audio actuel dans le canal de "
"sortie audio .\n"
" *\n"
" * @remarks  Effacer le tampon de données audio actuel dans le canal de "
"sortie audio .\n"
" *\n"
" * @attention  Effacer le tampon de données audio actuel dans le canal de "
"sortie audio .\n"
" */\n"
"int IMP_AO_ClearChnBuf(int audioDevId, int aoChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:913
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_QueryChnStat(int audioDevId, int aoChn, IMPAudioOChnState "
"*status)\n"
" *\n"
" *  Interroger l'état actuel du tampon de données audio dans le canal de "
"sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Interroger l'état actuel du tampon de données "
"audio dans le canal de sortie audio .\n"
" * @param[in] aoChn  Interroger l'état actuel du tampon de données audio "
"dans le canal de sortie audio .\n"
" * @param[out] status  Pointeur de structure d'état du cache .\n"
" *\n"
" * @retval 0  Pointeur de structure d'état du cache .\n"
" * @retval  Pointeur de structure d'état du cache 0  Pointeur de structure "
"d'état du cache .\n"
" *\n"
" * @remarks  Pointeur de structure d'état du cache .\n"
" *\n"
" * @attention  Pointeur de structure d'état du cache .\n"
" */\n"
"int IMP_AO_QueryChnStat(int audioDevId, int aoChn, IMPAudioOChnState "
"*status);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:943
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AENC_CreateChn(int aeChn, IMPAudioEncChnAttr *attr)\n"
" *\n"
" *  Créer un canal d'encodage audio .\n"
" *\n"
" * @param[in] aeChn  Le numéro de canal .\n"
" * @param[in] attr  Pointeur d'attribut de canal de codage audio .\n"
" *\n"
" * @retval 0  Pointeur d'attribut de canal de codage audio .\n"
" * @retval  Pointeur d'attribut de canal de codage audio 0  Pointeur "
"d'attribut de canal de codage audio .\n"
" *\n"
" * @remarks  Pointeur d'attribut de canal de codage audio \n"
" * @code\n"
" * int AeChn = 0;\n"
" * IMPAudioEncChnAttr attr;\n"
" * attr.type = PT_G711A;\n"
" * attr.bufSize = 20;\n"
" * ret = IMP_AENC_CreateChn(AeChn, &attr);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"Audio encode create channel failed\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  Actuellement SDK Actuellement PT_G711A Actuellement PT_G711U "
"Actuellement PT_G726 codage . \\n\n"
" *  Alors utilisez SDK Encodage en , juste besoin de attr.type = PT_G711A "
"Peut . \\n\n"
" *  Comment utiliser un encodeur personnalisé , Vous devez enregistrer "
"l'encodeur , L'exemple de code est expliqué dans l'interface d'inscription "
".\n"
" */\n"
" int IMP_AENC_CreateChn(int aeChn, IMPAudioEncChnAttr *attr);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:959
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AENC_DestroyChn(int aeChn)\n"
" *\n"
" *  Détruire le canal d'encodage audio .\n"
" *\n"
" * @param[in] aeChn  Détruire le canal d'encodage audio .\n"
" *\n"
" * @retval 0  Détruire le canal d'encodage audio .\n"
" * @retval  Détruire le canal d'encodage audio 0  Détruire le canal "
"d'encodage audio .\n"
" *\n"
" * @remarks  Détruire le canal d'encodage audio .\n"
" *\n"
" * @attention  Détruire le canal d'encodage audio IMP_AENC_CreateChn "
"Détruire le canal d'encodage audio .\n"
" */\n"
" int IMP_AENC_DestroyChn(int aeChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1012
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AENC_SendFrame(int aeChn, IMPAudioFrame *frm)\n"
" *\n"
" *  Envoyer des trames audio encodées audio .\n"
" *\n"
" * @param[in] aeChn  Envoyer des trames audio encodées audio .\n"
" * @param[in] frm  Envoyer des trames audio encodées audio .\n"
" *\n"
" * @retval 0  Envoyer des trames audio encodées audio .\n"
" * @retval  Envoyer des trames audio encodées audio 0  Envoyer des trames "
"audio encodées audio .\n"
" *\n"
" * @remarks  Envoyer des trames audio encodées audio \n"
" * @code\n"
" * while(1) {\n"
" *\t\t//  Lire une trame de données \n"
" *\t\tret = fread(buf_pcm, 1, IMP_AUDIO_BUF_SIZE, file_pcm);\n"
" *\t\tif(ret < IMP_AUDIO_BUF_SIZE)\n"
" *\t\t\tbreak;\n"
" *\n"
" *\t\t//  Lire une trame de données \n"
" *\t\tIMPAudioFrame frm;\n"
" *\t\tfrm.virAddr = (uint32_t *)buf_pcm;\n"
" *\t\tfrm.len = ret;\n"
" *\t\tret = IMP_AENC_SendFrame(AeChn, &frm);\n"
" *\t\tif(ret != 0) {\n"
" *\t\t\tIMP_LOG_ERR(TAG, \"imp audio encode send frame failed\\n\");\n"
" *\t\t\treturn ret;\n"
" *\t\t}\n"
" *\n"
" *\t\t//  Obtenir le flux de code \n"
" *\t\tIMPAudioStream stream;\n"
" *\t\tret = IMP_AENC_GetStream(AeChn, &stream, BLOCK);\n"
" *\t\tif(ret != 0) {\n"
" *\t\t\tIMP_LOG_ERR(TAG, \"imp audio encode get stream failed\\n\");\n"
" *\t\t\treturn ret;\n"
" *\t\t}\n"
" *\n"
" *\t\t//  Utiliser le flux de code \n"
" *\t\tfwrite(stream.stream, 1, stream.len, file_g711);\n"
" *\n"
" *\t\t//  Diffuser le flux de code \n"
" *\t\tret = IMP_AENC_ReleaseStream(AeChn, &stream);\n"
" *\t\tif(ret != 0) {\n"
" *\t\t\tIMP_LOG_ERR(TAG, \"imp audio encode release stream failed\\n\");\n"
" *\t\t\treturn ret;\n"
" *\t\t}\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  Diffuser le flux de code .\n"
" */\n"
" int IMP_AENC_SendFrame(int aeChn, IMPAudioFrame *frm);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1030
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AENC_PollingStream(int AeChn, unsigned int timeout_ms)\n"
" *\n"
" * Polling Tampon de flux audio codé .\n"
" *\n"
" * @param[in] AeChn  Numéro de canal d'entrée de codage audio .\n"
" * @param[in] timeout_ms Polling Numéro de canal d'entrée de codage audio "
".\n"
" *\n"
" * @retval 0  Numéro de canal d'entrée de codage audio .\n"
" * @retval  Numéro de canal d'entrée de codage audio 0  Numéro de canal "
"d'entrée de codage audio .\n"
" *\n"
" * @remarks  Numéro de canal d'entrée de codage audio .\n"
" *\n"
" * @attention  Numéro de canal d'entrée de codage audio IMP_AENC_GetStream "
"Numéro de canal d'entrée de codage audio ， Numéro de canal d'entrée de "
"codage audio \n"
" *\t\t\t   Les données encodées sont prêtes ， Les données encodées sont "
"prêtes IMP_AENC_GetStream Obtenez les données encodées .\n"
" */\n"
"int IMP_AENC_PollingStream(int AeChn, unsigned int timeout_ms);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1048
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AENC_GetStream(int aeChn, IMPAudioStream *stream ,IMPBlock "
"block)\n"
" *\n"
" *  Obtenez le flux de code après l'encodage .\n"
" *\n"
" * @param[in] aeChn  Obtenez le flux de code après l'encodage .\n"
" * @param[in] stream  Obtenir un flux audio .\n"
" * @param[in] block  Obtenir un flux audio / Obtenir un flux audio .\n"
" *\n"
" * @retval 0  Obtenir un flux audio .\n"
" * @retval  Obtenir un flux audio 0  Obtenir un flux audio .\n"
" *\n"
" * @remarks  Voir un exemple de code IMP_AENC_SendFrame Description de la "
"fonction .\n"
" *\n"
" * @attention  Description de la fonction .\n"
" */\n"
" int IMP_AENC_GetStream(int aeChn, IMPAudioStream *stream ,IMPBlock "
"block);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1065
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AENC_ReleaseStream(int aeChn,IMPAudioStream *stream)\n"
" *\n"
" *  Libérez le flux de code obtenu à partir du canal de codage audio .\n"
" *\n"
" * @param[in] aeChn  Libérez le flux de code obtenu à partir du canal de "
"codage audio .\n"
" * @param[in] stream  Obtenir un pointeur de flux audio .\n"
" *\n"
" * @retval 0  Obtenir un pointeur de flux audio .\n"
" * @retval  Obtenir un pointeur de flux audio 0  Obtenir un pointeur de flux "
"audio .\n"
" *\n"
" * @remarks  Obtenir un pointeur de flux audio IMP_AENC_SendFrame Obtenir un "
"pointeur de flux audio .\n"
" *\n"
" * @attention  Obtenir un pointeur de flux audio .\n"
" */\n"
" int IMP_AENC_ReleaseStream(int aeChn,IMPAudioStream *stream);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1108
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AENC_RegisterEncoder(int *handle, IMPAudioEncEncoder "
"*encoder)\n"
" *\n"
" *  Enregistrer l'encodeur .\n"
" *\n"
" * @param[in] ps32handle  Enregistrer la poignée .\n"
" * @param[in] encoder  Structure d'attribut du codeur .\n"
" *\n"
" * @retval 0  Structure d'attribut du codeur .\n"
" * @retval  Structure d'attribut du codeur 0  Structure d'attribut du codeur "
".\n"
" *\n"
" * @remarks  Structure d'attribut du codeur \n"
" * @code\n"
" * int handle_g711a = 0;\n"
" * IMPAudioEncEncoder my_encoder;\n"
" * my_encoder.maxFrmLen = 1024;\n"
" * sprintf(my_encoder.name, \"%s\", \"MY_G711A\");\n"
" * my_encoder.openEncoder = NULL; //  Fonction de rappel de l'encodeur \n"
" * my_encoder.encoderFrm = MY_G711A_Encode_Frm; //  Fonction de rappel de "
"l'encodeur \n"
" * my_encoder.closeEncoder = NULL; //  Fonction de rappel de l'encodeur \n"
" *\n"
" * ret = IMP_AENC_RegisterEncoder(&handle_g711a, &my_encoder);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"IMP_AENC_RegisterEncoder failed\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" *\n"
" * //  Utiliser l'encodeur \n"
" * int AeChn = 0;\n"
" * IMPAudioEncChnAttr attr;\n"
" * attr.type = handle_g711a; //  Encodeur type Égal au retour d'une "
"inscription réussie handle_g711a La valeur de .\n"
" * attr.bufSize = 20;\n"
" * ret = IMP_AENC_CreateChn(AeChn, &attr);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"imp audio encode create channel failed\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  Comment utiliser et utiliser après l'enregistrement SDK "
"Identique à l'encodeur intégré .\n"
" */\n"
" int IMP_AENC_RegisterEncoder(int *handle, IMPAudioEncEncoder *encoder);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1124
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AENC_ReleaseEncoder(int *handle)\n"
" *\n"
" *  Déconnectez-vous de l'encodeur .\n"
" *\n"
" * @param[in] ps32handle  Déconnectez-vous de l'encodeur ( Handle obtenu "
"lors de l'enregistrement du codeur ).\n"
" *\n"
" * @retval 0  Handle obtenu lors de l'enregistrement du codeur .\n"
" * @retval  Handle obtenu lors de l'enregistrement du codeur 0  Handle "
"obtenu lors de l'enregistrement du codeur .\n"
" *\n"
" * @remarks  Handle obtenu lors de l'enregistrement du codeur .\n"
" *\n"
" * @attention  Handle obtenu lors de l'enregistrement du codeur .\n"
" */\n"
" int IMP_AENC_ReleaseEncoder(int *handle);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1153
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_ADEC_CreateChn(int adChn, IMPAudioDecChnAttr *attr)\n"
" *\n"
" *  Créer un canal de décodage audio .\n"
" *\n"
" * @param[in] adChn  Créer un canal de décodage audio .\n"
" * @param[in] attr  Pointeur d'attribut de canal .\n"
" *\n"
" * @retval 0  Pointeur d'attribut de canal .\n"
" * @retval  Pointeur d'attribut de canal 0  Pointeur d'attribut de canal .\n"
" *\n"
" * @remarks  Pointeur d'attribut de canal \n"
" * @code\n"
" * int adChn = 0;\n"
" * IMPAudioDecChnAttr attr;\n"
" * attr.type = PT_G711A;\n"
" * attr.bufSize = 20;\n"
" * attr.mode = ADEC_MODE_PACK;\n"
" * ret = IMP_ADEC_CreateChn(adChn, &attr);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"imp audio decoder create channel failed\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  Pointeur d'attribut de canal .\n"
" */\n"
" int IMP_ADEC_CreateChn(int adChn, IMPAudioDecChnAttr *attr);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1169
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_ADEC_DestroyChn(int adChn)\n"
" *\n"
" *  Détruire le canal de décodage audio .\n"
" *\n"
" * @param[in] adChn  Détruire le canal de décodage audio .\n"
" *\n"
" * @retval 0  Détruire le canal de décodage audio .\n"
" * @retval  Détruire le canal de décodage audio 0  Détruire le canal de "
"décodage audio .\n"
" *\n"
" * @remarks  Détruire le canal de décodage audio .\n"
" *\n"
" * @attention  Détruire le canal de décodage audio .\n"
" */\n"
" int IMP_ADEC_DestroyChn(int adChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1223
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_ADEC_SendStream(int adChn, IMPAudioStream *stream, IMPBlock "
"block)\n"
" *\n"
" *  Envoyer le flux de code audio au canal de décodage audio .\n"
" *\n"
" * @param[in] adChn  Envoyer le flux de code audio au canal de décodage "
"audio .\n"
" * @param[in] stream  Flux audio .\n"
" * @param[in] block  Flux audio / Flux audio .\n"
" *\n"
" * @retval 0  Flux audio .\n"
" * @retval  Flux audio 0  Flux audio .\n"
" *\n"
" * @remarks  Flux audio \n"
" * @code\n"
" * while(1) {\n"
" *\t\t//  Obtenez les données à décoder \n"
" *\t\tret = fread(buf_g711, 1, IMP_AUDIO_BUF_SIZE/2, file_g711);\n"
" *\t\tif(ret < IMP_AUDIO_BUF_SIZE/2)\n"
" *\t\t\tbreak;\n"
" *\n"
" *\t\t//  Envoyer des données décodées \n"
" *\t\tIMPAudioStream stream_in;\n"
" *\t\tstream_in.stream = (uint8_t *)buf_g711;\n"
" *\t\tstream_in.len = ret;\n"
" *\t\tret = IMP_ADEC_SendStream(adChn, &stream_in, BLOCK);\n"
" *\t\tif(ret != 0) {\n"
" *\t\t\tIMP_LOG_ERR(TAG, \"imp audio encode send frame failed\\n\");\n"
" *\t\t\treturn ret;\n"
" *\t\t}\n"
" *\n"
" *\t\t//  Obtenez les données décodées \n"
" *\t\tIMPAudioStream stream_out;\n"
" *\t\tret = IMP_ADEC_GetStream(adChn, &stream_out, BLOCK);\n"
" *\t\tif(ret != 0) {\n"
" *\t\t\tIMP_LOG_ERR(TAG, \"imp audio decoder get stream failed\\n\");\n"
" *\t\t\treturn ret;\n"
" *\t\t}\n"
" *\n"
" *\t\t//  Utiliser des données décodées \n"
" *\t\tfwrite(stream_out.stream, 1, stream_out.len, file_pcm);\n"
" *\n"
" *\t\t//  Libérez les données décodées \n"
" *\t\tret = IMP_ADEC_ReleaseStream(adChn, &stream_out);\n"
" *\t\tif(ret != 0) {\n"
" *\t\t\tIMP_LOG_ERR(TAG, \"imp audio decoder release stream failed\\n\");\n"
" *\t\t\treturn ret;\n"
" *\t\t}\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  Libérez les données décodées .\n"
" */\n"
" int IMP_ADEC_SendStream(int adChn, IMPAudioStream *stream, IMPBlock "
"block);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1241
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_ADEC_PollingStream(int AdChn, unsigned int timeout_ms)\n"
" *\n"
" * Polling Décoder le tampon de flux audio .\n"
" *\n"
" * @param[in] AdChn  Numéro de canal d'entrée de décodage audio .\n"
" * @param[in] timeout_ms Polling Numéro de canal d'entrée de décodage audio "
".\n"
" *\n"
" * @retval 0  Numéro de canal d'entrée de décodage audio .\n"
" * @retval  Numéro de canal d'entrée de décodage audio 0  Numéro de canal "
"d'entrée de décodage audio .\n"
" *\n"
" * @remarks  Numéro de canal d'entrée de décodage audio .\n"
" *\n"
" * @attention  Numéro de canal d'entrée de décodage audio IMP_ADEC_GetStream "
"Numéro de canal d'entrée de décodage audio ， Numéro de canal d'entrée de "
"décodage audio \n"
" *\t\t\t   Les données décodées sont prêtes ， Les données décodées sont "
"prêtes IMP_ADEC_GetStream Obtenez les données décodées .\n"
" */\n"
"int IMP_ADEC_PollingStream(int AdChn, unsigned int timeout_ms);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1259
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_ADEC_GetStream(int adChn, IMPAudioStream *stream ,IMPBlock "
"block)\n"
" *\n"
" *  Obtenez le flux de code décodé .\n"
" *\n"
" * @param[in] adChn  Obtenez le flux de code décodé .\n"
" * @param[in] stream  Obtenir un flux de code décodé .\n"
" * @param[in] block  Obtenir un flux de code décodé / Obtenir un flux de "
"code décodé .\n"
" *\n"
" * @retval 0  Obtenir un flux de code décodé .\n"
" * @retval  Obtenir un flux de code décodé 0  Obtenir un flux de code décodé "
".\n"
" *\n"
" * @remarks  Obtenir un flux de code décodé IMP_ADEC_SendStream Obtenir un "
"flux de code décodé .\n"
" *\n"
" * @attention  Obtenir un flux de code décodé .\n"
" */\n"
"int IMP_ADEC_GetStream(int adChn, IMPAudioStream *stream ,IMPBlock block);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1276
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_ADEC_ReleaseStream(int adChn,IMPAudioStream *stream)\n"
" *\n"
" *  Libérez le flux de code obtenu à partir du canal de décodage audio .\n"
" *\n"
" * @param[in] adChn  Libérez le flux de code obtenu à partir du canal de "
"décodage audio .\n"
" * @param[in] stream  Pointeur de flux audio .\n"
" *\n"
" * @retval 0  Pointeur de flux audio .\n"
" * @retval  Pointeur de flux audio 0  Pointeur de flux audio .\n"
" *\n"
" * @remarks  Pointeur de flux audio IMP_ADEC_SendStream Pointeur de flux "
"audio .\n"
" *\n"
" * @attention  Pointeur de flux audio .\n"
" */\n"
"int IMP_ADEC_ReleaseStream(int adChn,IMPAudioStream *stream);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1292
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_ADEC_ClearChnBuf(int adChn)\n"
" *\n"
" *  Effacer le tampon de données audio actuel dans le canal de décodage "
"audio .\n"
" *\n"
" * @param[in] adChn  Effacer le tampon de données audio actuel dans le canal "
"de décodage audio .\n"
" *\n"
" * @retval 0  Effacer le tampon de données audio actuel dans le canal de "
"décodage audio .\n"
" * @retval  Effacer le tampon de données audio actuel dans le canal de "
"décodage audio 0  Effacer le tampon de données audio actuel dans le canal de "
"décodage audio .\n"
" *\n"
" * @remarks  Effacer le tampon de données audio actuel dans le canal de "
"décodage audio .\n"
" *\n"
" * @attention  Effacer le tampon de données audio actuel dans le canal de "
"décodage audio .\n"
" */\n"
" int IMP_ADEC_ClearChnBuf(int adChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1338
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_ADEC_RegisterDecoder(int *handle, IMPAudioDecDecoder "
"*decoder)\n"
" *\n"
" *  Enregistrer le décodeur .\n"
" *\n"
" * @param[in] ps32handle  Enregistrer le décodeur .\n"
" * @param[in] decoder  Structure d'attribut du décodeur .\n"
" *\n"
" * @retval 0  Structure d'attribut du décodeur .\n"
" * @retval  Structure d'attribut du décodeur 0  Structure d'attribut du "
"décodeur .\n"
" *\n"
" * @remarks  Structure d'attribut du décodeur \n"
" * @code\n"
" * int handle_g711a = 0;\n"
" * IMPAudioDecDecoder my_decoder;\n"
" * sprintf(my_decoder.name, \"%s\", \"MY_G711A\");\n"
" * my_decoder.openDecoder = NULL; //  Fonction de rappel du décodeur \n"
" * my_decoder.decodeFrm = MY_G711A_Decode_Frm; //  Fonction de rappel du "
"décodeur \n"
" * my_decoder.getFrmInfo = NULL; //  Fonction de rappel du décodeur \n"
" * my_decoder.closeDecoder = NULL; //  Fonction de rappel du décodeur \n"
" *\n"
" * //  Fonction de rappel du décodeur \n"
" * ret = IMP_ADEC_RegisterDecoder(&handle_g711a, &my_decoder);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"IMP_ADEC_RegisterDecoder failed\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" *\n"
" * //  Utiliser le décodeur \n"
" * int adChn = 0;\n"
" * IMPAudioDecChnAttr attr;\n"
" * attr.type = handle_g711a; //  décodage type Égal à celui renvoyé par "
"l'enregistrement du décodeur handle_g711a.\n"
" * attr.bufSize = 20;\n"
" * attr.mode = ADEC_MODE_PACK;\n"
" * //  Créer un canal de décodage \n"
" * ret = IMP_ADEC_CreateChn(adChn, &attr);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"imp audio decoder create channel failed\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  Créer un canal de décodage SDK Identique au décodeur intégré "
".\n"
" */\n"
" int IMP_ADEC_RegisterDecoder(int *handle, IMPAudioDecDecoder *decoder);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1354
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_ADEC_ReleaseDecoder(int *handle)\n"
" *\n"
" *  Désenregistrer le décodeur .\n"
" *\n"
" * @param[in] ps32handle  Désenregistrer le décodeur ( Handle obtenu lors de "
"l'enregistrement du décodeur ).\n"
" *\n"
" * @retval 0  Handle obtenu lors de l'enregistrement du décodeur .\n"
" * @retval  Handle obtenu lors de l'enregistrement du décodeur 0  Handle "
"obtenu lors de l'enregistrement du décodeur .\n"
" *\n"
" * @remarks  Handle obtenu lors de l'enregistrement du décodeur .\n"
" *\n"
" * @attention  Handle obtenu lors de l'enregistrement du décodeur .\n"
" */\n"
" int IMP_ADEC_ReleaseDecoder(int *handle);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1385
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * ACODEC Configuration .\n"
" */\n"
"/**\n"
" * @fn int IMP_AI_SetVol(int audioDevId, int aiChn, int aiVol)\n"
" *\n"
" *  Régler le volume d'entrée audio .\n"
" *\n"
" * @param[in] aiDevId  Régler le volume d'entrée audio .\n"
" * @param[in] aiChn  Régler le volume d'entrée audio .\n"
" * @param[in] aiVol  Volume d'entrée audio .\n"
" *\n"
" * @retval 0  Volume d'entrée audio .\n"
" * @retval  Volume d'entrée audio 0  Volume d'entrée audio .\n"
" *\n"
" * @remarks  Volume d'entrée audio [-30 ~ 120]. -30 Volume d'entrée audio "
",120 Volume d'entrée audio 30dB, Volume d'entrée audio 0.5dB.\n"
" * @remarks  Volume d'entrée audio 60 Volume d'entrée audio ， Volume "
"d'entrée audio ， Volume d'entrée audio 60 Volume d'entrée audio ， Volume "
"d'entrée audio 1， Volume d'entrée audio 0.5dB Volume d'entrée audio 60 "
"Volume d'entrée audio ， Volume d'entrée audio 1， Volume d'entrée audio 0.5dB "
"Volume d'entrée audio \n"
" *\n"
" *  Volume d'entrée audio \n"
" * @code\n"
" * int volume = 60;\n"
" * ret = IMP_AI_SetVol(devID, chnID, volume);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"Audio Record set volume failed\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" * @endcode\n"
" * @attention  Si vous entrez aiVol dépassé [-30 ~ 120] La portée de , Moins "
"que -30 Prendra -30, plus que le 120 Prendre 120.\n"
" */\n"
" int IMP_AI_SetVol(int audioDevId, int aiChn, int aiVol);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1403
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_GetVol(int audioDevId, int aiChn, int *vol)\n"
" *\n"
" *  Obtenez le volume d'entrée audio .\n"
" *\n"
" * @param[in] aiDevId  Obtenez le volume d'entrée audio .\n"
" * @param[in] aiChn  Obtenez le volume d'entrée audio .\n"
" * @param[out] vol  Volume du canal d'entrée audio .\n"
" *\n"
" * @retval 0  Volume du canal d'entrée audio .\n"
" * @retval  Volume du canal d'entrée audio 0  Volume du canal d'entrée audio "
".\n"
" *\n"
" * @remarks  Volume du canal d'entrée audio .\n"
" *\n"
" * @attention  Volume du canal d'entrée audio .\n"
" */\n"
" int IMP_AI_GetVol(int audioDevId, int aiChn, int *vol);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1421
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_SetVolMute(int audioDevId, int aiChn, int mute)\n"
" *\n"
" *  Régler le son de l'entrée audio .\n"
" *\n"
" * @param[in] aiDevId  Régler le son de l'entrée audio .\n"
" * @param[in] aiChn  Régler le son de l'entrée audio .\n"
" * @param[out] mute  Signe de sourdine d'entrée audio , mute = 0: Couper le "
"son , mute = 1: Activer le son .\n"
" *\n"
" * @retval 0  Activer le son .\n"
" * @retval  Activer le son 0  Activer le son .\n"
" *\n"
" * @remarks  Appelez cette interface pour couper le son immédiatement .\n"
" *\n"
" * @attention  Appelez cette interface pour couper le son immédiatement .\n"
" */\n"
" int IMP_AI_SetVolMute(int audioDevId, int aiChn, int mute);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1440
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_SetVol(int audioDevId, int aoChn, int aoVol)\n"
" *\n"
" *  Régler le volume du canal de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Régler le volume du canal de sortie audio .\n"
" * @param[in] aoChn  Régler le volume du canal de sortie audio .\n"
" * @param[in] aoVol  Volume de sortie audio .\n"
" *\n"
" * @retval 0  Volume de sortie audio .\n"
" * @retval  Volume de sortie audio 0  Volume de sortie audio .\n"
" *\n"
" * @remarks  Volume de sortie audio [-30 ~ 120]. -30 Volume de sortie audio "
",120 Volume de sortie audio 30dB, Volume de sortie audio 0.5dB.\n"
" * @remarks  Volume de sortie audio 60 Volume de sortie audio ， Volume de "
"sortie audio ， Volume de sortie audio 60 Volume de sortie audio ， Volume de "
"sortie audio 1， Volume de sortie audio 0.5dB Volume de sortie audio 60 "
"Volume de sortie audio ， Volume de sortie audio 1， Volume de sortie audio "
"0.5dB Volume de sortie audio \n"
" *\n"
" * @attention  Volume de sortie audio aoVol Volume de sortie audio [-30 ~ "
"120] Volume de sortie audio , Volume de sortie audio -30 Volume de sortie "
"audio -30, Volume de sortie audio 120 Volume de sortie audio 120.\n"
" */\n"
" int IMP_AO_SetVol(int audioDevId, int aoChn, int aoVol);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1458
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_GetVol(int audioDevId, int aoChn, int *vol)\n"
" *\n"
" *  Obtenir le volume du canal de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Obtenir le volume du canal de sortie audio .\n"
" * @param[in] aoChn  Obtenir le volume du canal de sortie audio .\n"
" * @param[out] aoVol  Obtenir le volume du canal de sortie audio .\n"
" *\n"
" * @retval 0  Obtenir le volume du canal de sortie audio .\n"
" * @retval  Obtenir le volume du canal de sortie audio 0  Obtenir le volume "
"du canal de sortie audio .\n"
" *\n"
" * @remarks  Obtenir le volume du canal de sortie audio .\n"
" *\n"
" * @attention  Obtenir le volume du canal de sortie audio .\n"
" */\n"
" int IMP_AO_GetVol(int audioDevId, int aoChn, int *vol);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1476
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_SetVolMute(int audioDevId, int aoChn, int mute)\n"
" *\n"
" *  Régler la sortie audio mute .\n"
" *\n"
" * @param[in] audioDevId  Numéro du périphérique de sortie audio .\n"
" * @param[in] aoChn  Numéro du périphérique de sortie audio .\n"
" * @param[out] mute  Signe de sourdine de sortie audio , mute = 0: Signe de "
"sourdine de sortie audio , mute = 1: Signe de sourdine de sortie audio .\n"
" *\n"
" * @retval 0  Signe de sourdine de sortie audio .\n"
" * @retval  Signe de sourdine de sortie audio 0  Signe de sourdine de sortie "
"audio .\n"
" *\n"
" * @remarks  Signe de sourdine de sortie audio .\n"
" *\n"
" * @attention  Signe de sourdine de sortie audio .\n"
" */\n"
" int IMP_AO_SetVolMute(int audioDevId, int aoChn, int mute);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1496
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_SetGain(int audioDevId, int aiChn, int aiGain)\n"
" *\n"
" *  Régler le gain d'entrée audio .\n"
" *\n"
" * @param[in] audioDevId  Régler le gain d'entrée audio .\n"
" * @param[in] aiChn  Régler le gain d'entrée audio .\n"
" * @param[out] aiGain  Gain d'entrée audio , gamme [0 ~ 31].\n"
" *\n"
" * @retval 0  gamme .\n"
" * @retval  gamme 0  gamme .\n"
" *\n"
" * @remarks  gamme .\n"
" *\n"
" * @attention aiGain La gamme est [0 ~ 31], Si la valeur saisie est "
"inférieure à 0, alors aiGain La valeur sera \\n\n"
" *  définir comme 0. Si la valeur est supérieure à 31,aiGain Sera réglé sur "
"10.\n"
" *\n"
" */\n"
" int IMP_AI_SetGain(int audioDevId, int aiChn, int aiGain);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1514
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_GetGain(int audioDevId, int aiChn, int *aiGain)\n"
" *\n"
" *  Obtenir AI Gagner de la valeur .\n"
" *\n"
" * @param[in] audioDevId  Gagner de la valeur .\n"
" * @param[in] aiChn  Gagner de la valeur .\n"
" * @param[out] aiGain  Gagner de la valeur .\n"
" *\n"
" * @retval 0  Gagner de la valeur .\n"
" * @retval  Gagner de la valeur 0  Gagner de la valeur .\n"
" *\n"
" * @remarks  Gagner de la valeur .\n"
" *\n"
" * @attention  Gagner de la valeur .\n"
" */\n"
" int IMP_AI_GetGain(int audioDevId, int aiChn, int *aiGain);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1534
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_SetGain(int audioDevId, int aoChn, int aoGain)\n"
" *\n"
" *  Régler le gain de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Régler le gain de sortie audio .\n"
" * @param[in] aoChn  Régler le gain de sortie audio .\n"
" * @param[out] aoGain  Gain de sortie audio , Gain de sortie audio [0 ~ "
"0xcb].\n"
" *\n"
" * @retval 0  Gain de sortie audio .\n"
" * @retval  Gain de sortie audio 0  Gain de sortie audio .\n"
" *\n"
" * @remarks  Gain de sortie audio .\n"
" *\n"
" * @attention aoGain Gain de sortie audio [0 ~ 31], Gain de sortie audio 0, "
"Gain de sortie audio aoGain Gain de sortie audio \\n\n"
" *  Gain de sortie audio 0. Gain de sortie audio 31,aoGain Gain de sortie "
"audio 31.\n"
" *\n"
" */\n"
" int IMP_AO_SetGain(int audioDevId, int aoChn, int aoGain);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1552
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_GetGain(int audioDevId, int aoChn, int *aoGain)\n"
" *\n"
" *  Obtenez le gain de sortie audio .\n"
" *\n"
" * @param[in] audioDevId  Obtenez le gain de sortie audio .\n"
" * @param[in] aoChn  Obtenez le gain de sortie audio .\n"
" * @param[out] aoGain  Obtenez le gain de sortie audio .\n"
" *\n"
" * @retval 0  Obtenez le gain de sortie audio .\n"
" * @retval  Obtenez le gain de sortie audio 0  Obtenez le gain de sortie "
"audio .\n"
" *\n"
" * @remarks  Obtenez le gain de sortie audio .\n"
" *\n"
" * @attention  Obtenez le gain de sortie audio .\n"
" */\n"
" int IMP_AO_GetGain(int audioDevId, int aoChn, int *aoGain);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1569
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_Soft_Mute(int audioDevId, int aoChn)\n"
" *\n"
" *  Contrôle de la sortie silencieuse .\n"
" *\n"
" * @param[in] audioDevId  Contrôle de la sortie silencieuse .\n"
" * @param[in] aoChn  Contrôle de la sortie silencieuse .\n"
" *\n"
" * @retval 0  Contrôle de la sortie silencieuse .\n"
" * @retval  Contrôle de la sortie silencieuse 0  Contrôle de la sortie "
"silencieuse .\n"
" *\n"
" * @remarks  L'appel de cette interface ne coupera pas immédiatement le son "
"， Réduira lentement le volume à partir de l'état de lecture normal ， Jusqu'à "
"ce que ce soit vraiment silencieux .\n"
" *\n"
" * @attention  Jusqu'à ce que ce soit vraiment silencieux .\n"
" */\n"
" int IMP_AO_Soft_Mute(int audioDevId, int aoChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1586
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AO_Soft_UNMute(int audioDevId, int aoChn)\n"
" *\n"
" *  Contrôle de la mise en sourdine douce de la sortie .\n"
" *\n"
" * @param[in] audioDevId  Contrôle de la mise en sourdine douce de la sortie "
".\n"
" * @param[in] aoChn  Contrôle de la mise en sourdine douce de la sortie .\n"
" *\n"
" * @retval 0  Contrôle de la mise en sourdine douce de la sortie .\n"
" * @retval  Contrôle de la mise en sourdine douce de la sortie 0  Contrôle "
"de la mise en sourdine douce de la sortie .\n"
" *\n"
" * @remarks  L'appel de cette interface ne restaure pas immédiatement le "
"volume actuel ， Augmentera lentement le volume à partir de l'état muet ， "
"Jusqu'à ce que le volume atteigne le volume réglé .\n"
" *\n"
" * @attention  Jusqu'à ce que le volume atteigne le volume réglé .\n"
" */\n"
" int IMP_AO_Soft_UNMute(int audioDevId, int aoChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1626
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_GetFrameAndRef(int audioDevId, int aiChn, IMPAudioFrame "
"*frm, IMPAudioFrame *ref, IMPBlock block)\n"
" *\n"
" *  Obtenir une image audio et une image de référence de sortie .\n"
" *\n"
" * @param[in] audioDevId  Obtenir une image audio et une image de référence "
"de sortie .\n"
" * @param[in] aiChn  Obtenir une image audio et une image de référence de "
"sortie .\n"
" * @param[out] frm  Obtenir une image audio et une image de référence de "
"sortie .\n"
" * @param[out] ref  Pointeur de structure du cadre de référence .\n"
" * @param[in] block  Pointeur de structure du cadre de référence / Pointeur "
"de structure du cadre de référence .\n"
" *\n"
" * @retval 0  Pointeur de structure du cadre de référence .\n"
" * @retval  Pointeur de structure du cadre de référence 0  Pointeur de "
"structure du cadre de référence .\n"
" *\n"
" * @remarks  Pointeur de structure du cadre de référence \n"
" * @code\n"
" * IMPAudioFrame frm;\n"
" * IMPAudioFrame ref;\n"
" * //  Pointeur de structure du cadre de référence \n"
" * ret = IMP_AI_GetFrameAndRef(devID, chnID, &frm, &ref, BLOCK);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"Audio Get Frame Data error\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" *\n"
" * fwrite(frm.virAddr, 1, frm.len, record_file); //  Pointeur de structure "
"du cadre de référence \n"
" * fwrite(ref.virAddr, 1, ref.len, ref_file); //  Utiliser des cadres de "
"référence audio \n"
" *\n"
" * //  Utiliser des cadres de référence audio \n"
" * ret = IMP_AI_ReleaseFrame(devID, chnID, &frm);\n"
" * if(ret != 0) {\n"
" *\t\tIMP_LOG_ERR(TAG, \"Audio release frame data error\\n\");\n"
" *\t\treturn ret;\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @attention  Utiliser des cadres de référence audio .\n"
" */\n"
" int IMP_AI_GetFrameAndRef(int audioDevId, int aiChn, IMPAudioFrame *frm, "
"IMPAudioFrame *ref, IMPBlock block);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1644
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_EnableAecRefFrame(int audioDevId, int aiChn, int "
"audioAoDevId, int aoChn)\n"
" *\n"
" *  Ouvrir pour obtenir le cadre de référence .\n"
" *\n"
" * @param[in] audioDevId  Ouvrir pour obtenir le cadre de référence .\n"
" * @param[in] aiChn  Ouvrir pour obtenir le cadre de référence .\n"
" * @param[in] audioAoDevId  Ouvrir pour obtenir le cadre de référence .\n"
" * @param[in] aoChn  Ouvrir pour obtenir le cadre de référence .\n"
" *\n"
" * @retval 0  Ouvrir pour obtenir le cadre de référence .\n"
" * @retval  Ouvrir pour obtenir le cadre de référence 0  Ouvrir pour obtenir "
"le cadre de référence .\n"
" *\n"
" * @remarks  transfert IMP_AI_GetFrameAndRef Appelez cette interface avant "
".\n"
" * @attention  Appelez cette interface avant .\n"
" */\n"
" int IMP_AI_EnableAecRefFrame(int audioDevId, int aiChn, int audioAoDevId, "
"int aoChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1662
#, markdown-text, no-wrap
msgid ""
"/**\n"
" * @fn int IMP_AI_DisableAecRefFrame(int audioDevId, int aiChn, int "
"audioAoDevId, int aoChn)\n"
" *\n"
" *  Fermer Obtenir le cadre de référence .\n"
" *\n"
" * @param[in] audioDevId  Fermer Obtenir le cadre de référence .\n"
" * @param[in] aiChn  Fermer Obtenir le cadre de référence .\n"
" * @param[in] audioAoDevId  Fermer Obtenir le cadre de référence .\n"
" * @param[in] aoChn  Fermer Obtenir le cadre de référence .\n"
" *\n"
" * @retval 0  Fermer Obtenir le cadre de référence .\n"
" * @retval  Fermer Obtenir le cadre de référence 0  Fermer Obtenir le cadre "
"de référence .\n"
" *\n"
" * @remarks  Fermer Obtenir le cadre de référence .\n"
" * @attention  Fermer Obtenir le cadre de référence .\n"
" */\n"
" int IMP_AI_DisableAecRefFrame(int audioDevId, int aiChn, int audioAoDevId, "
"int aoChn);\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1668
#, markdown-text, no-wrap
msgid ""
"#ifdef __cplusplus\n"
"#if __cplusplus\n"
"}\n"
"#endif\n"
"#endif /* __cplusplus */\n"
msgstr ""

#. type: Plain text
#: ./includes.fr/imp_audio.h:1669
#, markdown-text, no-wrap
msgid "#endif /* __IMP_AUDIO_H__ */\n"
msgstr ""
