# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-30 11:06+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: lang
#: imp_isp-programigo_gvidilo.md:1
#, no-wrap
msgid "eo"
msgstr "it"

#. type: YAML Front Matter: lang-niv
#: imp_isp-programigo_gvidilo.md:1
#, no-wrap
msgid "auto"
msgstr "auto"

#. type: YAML Front Matter: lang-ref
#: imp_isp-programigo_gvidilo.md:1
#, no-wrap
msgid "052-ISP-programigo_gvidilo"
msgstr "052-ISP-programigo_gvidilo"

#. type: YAML Front Matter: layout
#: imp_isp-programigo_gvidilo.md:1
#, no-wrap
msgid "page"
msgstr "page"

#. type: YAML Front Matter: title
#: imp_isp-programigo_gvidilo.md:1
#, fuzzy, no-wrap
msgid "Gvidilo pri video-programado"
msgstr "Guida alla programmazione video."

#. type: Title #
#: imp_isp-programigo_gvidilo.md:9
#, fuzzy, no-wrap
msgid "IMP_ISP (voir imp_isp.h)"
msgstr "IMP_ISP (voir imp_isp.h)"

#. type: Plain text
#: imp_isp-programigo_gvidilo.md:11
#, fuzzy, no-wrap
msgid "Bildosigna prilaborado. Ĉefe inkluzivas agordojn de bildaj efikoj, reĝimoŝaltilo kaj registrado, aldono kaj forigo de sensilo.\n"
msgstr "Elaborazione delle immagini. Include principalmente le impostazioni degli effetti dell'immagine, il cambio di modalità e la registrazione, l'aggiunta e la rimozione del sensore.\n"

#. type: Plain text
#: imp_isp-programigo_gvidilo.md:13
#, fuzzy, no-wrap
msgid "La ISP-modulo havas nenion komunan kun datuma fluo kaj ne bezonas esti ligita, ĝi nur funkcias laŭ efektagordo kaj sensila kontrolo.\n"
msgstr "Il modulo ISP non ha nulla a che fare con il flusso di dati e non ha bisogno di essere collegato, funziona solo in termini di configurazione degli effetti e controllo dei sensori.\n"

#. type: Title ##
#: imp_isp-programigo_gvidilo.md:14
#, fuzzy, no-wrap
msgid "Aktivigo"
msgstr "Attivazione"

#. type: Plain text
#: imp_isp-programigo_gvidilo.md:18
#, fuzzy, no-wrap
msgid ""
"La paŝoj de aktivigo de ISP-modulo estas jenaj:\n"
"* paŝo 1: Kreu ISP-modulon\n"
msgstr ""
"I passaggi per l'attivazione di un modulo ISP sono i seguenti:\n"
"* passaggio 1: creazione di un modulo ISP\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:19
#, no-wrap
msgid ""
"int ret = 0;\n"
"  // étape 1 : \n"
"  ret = IMP_ISP_Open (); \n"
"  if (ret <0) {\n"
"    printf (\"Échec de ISPInit\\n\");\n"
"    return -1;\n"
"  }\n"
msgstr ""
"int ret = 0;\n"
"  // étape 1 : \n"
"  ret = IMP_ISP_Open (); \n"
"  if (ret <0) {\n"
"    printf (\"Échec de ISPInit\\n\");\n"
"    return -1;\n"
"  }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:29
#, fuzzy, no-wrap
msgid "2a paŝo: Aldonu sensilon, la sensila pelilo estis aldonita al la kerno antaŭ ĉi tiu operacio.\n"
msgstr "Passaggio 2: aggiungere il sensore, il driver del sensore è stato aggiunto al kernel prima di questa operazione.\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:31
#, no-wrap
msgid ""
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[0].cbus_type = SENSOR_CONTROL_INTERFACE_I2C; // OU SENSOR_CONTROL_INTERFACE_SPI\n"
"  sensor[0].i2c = {\n"
"    .type = \"xxx\", // nom du périphérique I2C, qui doit être cohérent avec le nom de la structure i2c_device_id dans le pilote du capteur.\n"
"    .addr = xx, // adresse I2C\n"
"    .i2c_adapter_id = xx, // ID du contrôleur I2C où se trouve le capteur\n"
"  }\n"
"  /* OU\n"
"   * sensor[0].spi = {\n"
"   *   .modalias = \"xx\", // nom du périphérique SPI, doit être cohérent avec le nom de la structure spi_device_id dans le pilote du capteur.\n"
"   *     .bus_num = xx, // adresse du bus SPI\n"
"   *}\n"
"   */\n"
"  sensor[1].name[0]=0; // pas d'autre capteur\n"
"  ret = IMP_ISP_AddSensor (& sensor); \n"
"  if (ret <0) {\n"
"    printf (\"Impossible d'enregistrer le capteur \\n\");\n"
"    return -1;\n"
"  }\n"
msgstr ""
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[0].cbus_type = SENSOR_CONTROL_INTERFACE_I2C; // OU SENSOR_CONTROL_INTERFACE_SPI\n"
"  sensor[0].i2c = {\n"
"    .type = \"xxx\", // nom du périphérique I2C, qui doit être cohérent avec le nom de la structure i2c_device_id dans le pilote du capteur.\n"
"    .addr = xx, // adresse I2C\n"
"    .i2c_adapter_id = xx, // ID du contrôleur I2C où se trouve le capteur\n"
"  }\n"
"  /* OU\n"
"   * sensor[0].spi = {\n"
"   *   .modalias = \"xx\", // nom du périphérique SPI, doit être cohérent avec le nom de la structure spi_device_id dans le pilote du capteur.\n"
"   *     .bus_num = xx, // adresse du bus SPI\n"
"   *}\n"
"   */\n"
"  sensor[1].name[0]=0; // pas d'autre capteur\n"
"  ret = IMP_ISP_AddSensor (& sensor); \n"
"  if (ret <0) {\n"
"    printf (\"Impossible d'enregistrer le capteur \\n\");\n"
"    return -1;\n"
"  }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:54
#, fuzzy, no-wrap
msgid "Paŝo 3: Aktivigu la sensilon, ĝi komencos produkti bildojn.\n"
msgstr "Passaggio 3: attiva il sensore, inizierà a produrre immagini.\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:56
#, no-wrap
msgid ""
"  ret = IMP_ISP_EnableSensor (void);\n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"  ret = IMP_ISP_EnableSensor (void);\n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:64
#, fuzzy, no-wrap
msgid "paŝo 4: Aktivigu la agordojn:\n"
msgstr "Passaggio 4: attivare le impostazioni:\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:66
#, no-wrap
msgid ""
"  ret = IMP_ISP_EnableTuning (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le réglage \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"  ret = IMP_ISP_EnableTuning (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le réglage \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:74
#, fuzzy, no-wrap
msgid "Paŝo 5: Alvoki ISP-elpurigan interfacon: Bonvolu raporti al la dokumentado de ISP-elpuriga interfaco.\n"
msgstr "Passaggio 5: richiamare l'interfaccia di debug dell'ISP: fare riferimento alla documentazione dell'interfaccia di debug dell'ISP.\n"

#. type: Title ##
#: imp_isp-programigo_gvidilo.md:77
#, fuzzy, no-wrap
msgid "Senaktivigo de ISP-modulo"
msgstr "Disattivazione di un modulo ISP"

#. type: Plain text
#: imp_isp-programigo_gvidilo.md:81
#, fuzzy, no-wrap
msgid ""
"La paŝoj por malinstali la ISP-modulon estas jenaj:\n"
"* paŝo 1: Malŝalti la ISP-agordon\n"
msgstr ""
"I passaggi per disinstallare il modulo ISP sono i seguenti:\n"
"* passaggio 1: Disabilitare la configurazione ISP\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:82
#, no-wrap
msgid ""
"int ret = 0;\n"
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[1].name[0] = 0;\n"
"  ret = IMP_ISP_DisableTuning ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le réglage \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"int ret = 0;\n"
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[1].name[0] = 0;\n"
"  ret = IMP_ISP_DisableTuning ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le réglage \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:94
#, fuzzy, no-wrap
msgid "2a paŝo: fermu la sensilojn. (FrameSource devas esti fermita antaŭ ĉi tiu operacio)\n"
msgstr "Passaggio 2: chiudere i sensori. (FrameSource deve essere chiuso prima di questa operazione)\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:96
#, no-wrap
msgid ""
"ret = IMP_ISP_DisableSensor (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"ret = IMP_ISP_DisableSensor (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:105
#, fuzzy, no-wrap
msgid "3a paŝo: forigu la sensilojn, la sensiloj devas esti fermitaj antaŭ ĉi tiu operacio.\n"
msgstr "Fase 3: rimuovere i sensori, i sensori devono essere chiusi prima di questa operazione.\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:107
#, no-wrap
msgid ""
"ret = IMP_ISP_DelSensor (& sensor); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"ret = IMP_ISP_DelSensor (& sensor); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:115
#, fuzzy, no-wrap
msgid "Paŝo 4: Purigu la ISP-modulon, ĉiuj sensiloj devas esti forigitaj antaŭ ĉi tiu operacio.\n"
msgstr "Passaggio 4: pulire il modulo ISP, tutti i sensori devono essere rimossi prima di questa operazione.\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:117
#, no-wrap
msgid ""
"ret = IMP_ISP_Close ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"ret = IMP_ISP_Close ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Title ##
#: imp_isp-programigo_gvidilo.md:127
#, fuzzy, no-wrap
msgid "listo de funkcioj"
msgstr "elenco delle funzioni"

#. type: Plain text
#: imp_isp-programigo_gvidilo.md:201
#, fuzzy, no-wrap
msgid ""
"int IMP_ISP_Malferma(malplena);\n"
"int IMP_ISP_Fermi(malplenan);\n"
"int IMP_ISP_AddSensor(IMPSensorInfo *pinfo);\n"
"int IMP_ISP_DelSensor(IMPSensorInfo *pinfo);\n"
"int IMP_ISP_EnableSensor(malplena);\n"
"int IMP_ISP_DisableSensor(malplena);\n"
"int IMP_ISP_SetSensorRegister(uint32_t reg, uint32_t valoro);\n"
"int IMP_ISP_GetSensorRegister(uint32_t reg, uint32_t *valoro);\n"
"int IMP_ISP_EnableTuning(malplena);\n"
"int IMP_ISP_DisableTuning(malplena);\n"
"int IMP_ISP_Agordo_SetSensorFPS(uint32_t fps_num, uint32_t fps_den);\n"
"int IMP_ISP_Tuning_GetSensorFPS(uint32_t *fps_num, uint32_t *fps_den);\n"
"int IMP_ISP_Agordo_SetAntiFlickerAttr(IMPISPAntiflickerAttr attr);\n"
"int IMP_ISP_Tuning_GetAntiFlickerAttr(IMPISPAntiflickerAttr *pattr);\n"
"int IMP_ISP_Agordo_SetRawDRC(IMPISPDrcAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetRawDRC(IMPISPDrcAttr *pinfo);\n"
"int IMP_ISP_Agordo_SetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
"int IMP_ISP_Agordo_SetTemperDnsCtl(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Agordo_GetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetWDRAttr(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Agordo_GetWDRAttr(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetSceneMode(IMPISPSceneMode mode);\n"
"int IMP_ISP_Agordo_GetSceneMode(IMPISPSceneMode *pmode);\n"
"int IMP_ISP_Tuning_SetColorfxMode(IMPISPColorfxMode mode);\n"
"int IMP_ISP_Agordo_GetColorfxMode(IMPISPColorfxMode *pmode);\n"
"int IMP_ISP_Tuning_Agordu Brilecon(sennoma signo brila);\n"
"int IMP_ISP_Agordo_GetBrightness(unsigned char *pbright);\n"
"int IMP_ISP_Tuning_SetContrast(sennoma signokontrasto);\n"
"int IMP_ISP_Agordo_GetContrast(unsigned char *pcontrast);\n"
"int IMP_ISP_Tuning_SetSharpness(sennoma akra akreco);\n"
"int IMP_ISP_Agordo_GetSharpness(unsigned char *psharpness);\n"
"int IMP_ISP_Tuning_SetSaturation(sennoma signo (sat 22 °);\n"
"int IMP_ISP_Agordo_GetSaturation(unsigned char *psat);\n"
"int IMP_ISP_Tuning_SetISPProcess(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Agordo_SetFWFreeze(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_SaveAllParam(char *vojo);\n"
"int IMP_ISP_Agordo_SetISPBypass(IMPISPTuningOpsMode enable);\n"
"int IMP_ISP_Tuning_GetTotalGain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_Agordu ISPHflip(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Agordo_GetISPHflip(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetISPVflip(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Agordo_GetISPVflip(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetISPRunningMode(IMPISPRunningMode mode);\n"
"int IMP_ISP_Agordo_GetISPRunningMode(IMPISPRunningMode *pmode);\n"
"int IMP_ISP_Tuning_SetAeStrategy(IMPISPAeStrategy-strategio);\n"
"int IMP_ISP_Agordo_GetAeStrategy(IMPISPAeStrategy *pstrategy);\n"
"int IMP_ISP_Tuning_SetGamma(IMPISPGamma *gama);\n"
"int IMP_ISP_Agordo_GetGamma(IMPISPGamma *gamma);\n"
"int IMP_ISP_Tuning_SetAeComp(int comp);\n"
"int IMP_ISP_Agordo_GetAeComp(int *comp);\n"
"int IMP_ISP_Tuning_SetExpr(IMPISPExpr *ekspr);\n"
"int IMP_ISP_Agordo_GetExpr(IMPISPExpr *expr);\n"
"int IMP_ISP_Tuning_AE_GetROI(IMPISPAERoi *isp_ae_roi);\n"
"int IMP_ISP_Tuning_AE_SetROI(IMPISPAERoi *isp_ae_roi);\n"
"int IMP_ISP_Tuning_SetWB(IMPISPWB *wb);\n"
"int IMP_ISP_Agordo_GetWB(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_GetWB_Statis(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_Awb_GetCwfShift(IMPISPWB *isp_wb_attr);\n"
"int IMP_ISP_Tuning_Awb_SetCwfShift(IMPISPWB *isp_wb_attr);\n"
"int IMP_ISP_Tuning_SetMaxAgain(uint32_t gain);\n"
"int IMP_ISP_Tuning_GetMaxAgain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetMaxDgain(uint32_t gain);\n"
"int IMP_ISP_Tuning_GetMaxDgain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetVideoDrop(malplena (*cb)(malplena));\n"
"int IMP_ISP_Agordo_SetHiLightDepress(uint32_t forto);\n"
"int IMP_ISP_Agordo_SetTemperStrength(uint32_t-proporcio);\n"
"int IMP_ISP_Agordo_SetSinterStrength(uint32_t-proporcio);\n"
"int IMP_ISP_Agordo_SetDPStrength(uint32_t-proporcio);\n"
"int IMP_ISP_Agordo_SetAntiFogAttr(IMPISPAntiFogAttr attr);\n"
"int IMP_ISP_Tuning_GetEVAttr(IMPISPEVAttr *attr);\n"
msgstr ""
"int IMP_ISP_Aperto(vuoto);\n"
"int IMP_ISP_Chiude(vuoto);\n"
"int IMP_ISP_AddSensor(IMPSensorInfo *pinfo);\n"
"int IMP_ISP_DelSensor(IMPSensorInfo *pinfo);\n"
"int IMP_ISP_EnableSensor(vuoto);\n"
"int IMP_ISP_DisableSensor(vuoto);\n"
"int IMP_ISP_SetSensorRegister(uint32_t reg, uint32_valore t);\n"
"int IMP_ISP_GetSensorRegister(uint32_t reg, uint32_valore t *);\n"
"int IMP_ISP_EnableTuning(blank);\n"
"int IMP_ISP_DisableTuning(blank);\n"
"int IMP_ISP_Configurazione_SetSensorFPS(uint32_t fps_num, uint32_t fps_den);\n"
"int IMP_ISP_Tuning_GetSensorFPS(uint32_t *fps_num, uint32_t *fps_den);\n"
"int IMP_ISP_Configurazione_SetAntiFlickerAttr(IMPISPAntiflickerAttr attr);\n"
"int IMP_ISP_Tuning_GetAntiFlickerAttr(IMPISPAntiflickerAttr *pattr);\n"
"int IMP_ISP_Configurazione_SetRawDRC(IMPISPDrcAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetRawDRC(IMPISPDrcAttr *pinfo);\n"
"int IMP_ISP_Configurazione_SetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
"int IMP_ISP_Configurazione_SetTemperDnsCtl(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Configurazione_GetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetWDRAttr(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Impostazione_GetWDRAttr(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetSceneMode(IMPISPSceneMode mode);\n"
"int IMP_ISP_Setting_GetSceneMode(IMPISPSceneMode *pmode);\n"
"int IMP_ISP_Tuning_SetColorfxMode(IMPISPColorfxMode mode);\n"
"int IMP_ISP_Impostazione_GetColorfxMode(IMPISPColorfxMode *pmode);\n"
"int IMP_ISP_Tuning_Set Luminosità(segno senza nome luminoso);\n"
"int IMP_ISP_Configurazione_GetBrightness(unsigned char *pbright);\n"
"int IMP_ISP_Tuning_SetContrast(contrasto caratteri senza nome);\n"
"int IMP_ISP_Configurazione_GetContrast(unsigned char *pcontrast);\n"
"int IMP_ISP_Tuning_SetSharpness(senza nome nitidezza nitidezza);\n"
"int IMP_ISP_Configurazione_GetSharpness(unsigned char *psharpness);\n"
"int IMP_ISP_Tuning_Imposta Saturazione(segno senza nome (a 22 °);\n"
"int IMP_ISP_Configurazione_GetSaturation(unsigned char *psat);\n"
"int IMP_ISP_Tuning_SetISPProcess(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Configurazione_SetFWFreeze(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_SaveAllParam(char *percorso);\n"
"int IMP_ISP_Configurazione_SetISPBypass(IMPISPTuningOpsMode enable);\n"
"int IMP_ISP_Tuning_GetTotalGain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_Imposta ISPHflip(IMPISPTuningOpsMode modalità);\n"
"int IMP_ISP_Configurazione_GetISPHflip(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetISPVflip(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Configurazione_GetISPVflip(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetISPRunningMode(IMPISPRunningMode mode);\n"
"int IMP_ISP_Configurazione_GetISPRunningMode(IMPISPRunningMode *pmode);\n"
"int IMP_ISP_Tuning_SetAeStrategy(Strategia IMPISPAeStrategy);\n"
"int IMP_ISP_Configurazione_GetAeStrategy(IMPISPAeStrategy *pstrategy);\n"
"int IMP_ISP_Tuning_SetGamma(IMPISPGamma *range);\n"
"int IMP_ISP_Configurazione_GetGamma(IMPISPGamma *gamma);\n"
"int IMP_ISP_Tuning_SetAeComp(int comp);\n"
"int IMP_ISP_Configurazione_GetAeComp(int *comp);\n"
"int IMP_ISP_Tuning_SetExpr(IMPISPExpr *ekspr);\n"
"int IMP_ISP_Configurazione_GetExpr(IMPISPExpr *expr);\n"
"int IMP_ISP_Tuning_AE_GetROI(IMPISPAERoi *isp_ae_roi);\n"
"int IMP_ISP_Tuning_AE_SetROI(IMPISPAERoi *isp_ae_roi);\n"
"int IMP_ISP_Tuning_SetWB(IMPISPWB *wb);\n"
"int IMP_ISP_Configurazione_GetWB(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_GetWB_Statis(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_Awb_GetCwfShift(IMPISPWB *isp_wb_attr);\n"
"int IMP_ISP_Tuning_Awb_SetCwfShift(IMPISPWB *isp_wb_attr);\n"
"int IMP_ISP_Tuning_SetMaxAgain(uint32_t gain);\n"
"int IMP_ISP_Tuning_GetMaxAgain(uint32_t *gain);\n"
"int IMP_°) ISP_Tuning_SetMaxDgain(uint32_t gain);\n"
"int IMP_ISP_Tuning_GetMaxDgain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetVideoDrop(vuoto (*cb)(vuoto));\n"
"int IMP_ISP_Configurazione_SetHiLightDepress(uint32_t forza);\n"
"int IMP_ISP_Configurazione_SetTemperStrength(uint32_rapporto t);\n"
"int IMP_ISP_Configurazione_SetSinterStrength(uint32_rapporto t);\n"
"int IMP_ISP_Configurazione_SetDPStrength(uint32_rapporto t);\n"
"int IMP_ISP_Configurazione_SetAntiFogAttr(IMPISPAntiFogAttr attr);\n"
"int IMP_ISP_Tuning_GetEVAttr(IMPISPEVAttr *attr);\n"
