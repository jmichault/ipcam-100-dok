# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-09 20:23+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: lang
#: imp_isp-programigo_gvidilo.md:1
#, no-wrap
msgid "eo"
msgstr "ja"

#. type: YAML Front Matter: lang-niv
#: imp_isp-programigo_gvidilo.md:1
#, no-wrap
msgid "auto"
msgstr "auto"

#. type: YAML Front Matter: lang-ref
#: imp_isp-programigo_gvidilo.md:1
#, no-wrap
msgid "052-ISP-programigo_gvidilo"
msgstr "052-ISP-programigo_gvidilo"

#. type: YAML Front Matter: layout
#: imp_isp-programigo_gvidilo.md:1
#, no-wrap
msgid "page"
msgstr "page"

#. type: YAML Front Matter: title
#: imp_isp-programigo_gvidilo.md:1
#, fuzzy, no-wrap
msgid "Video Programado Guide"
msgstr "ビデオプログラミングガイド"

#. type: Title #
#: imp_isp-programigo_gvidilo.md:9
#, fuzzy, no-wrap
msgid "_IMP\\_ISP_  \\( vidu  _imp\\_isp.h\\_)"
msgstr "_IMP\\_ISP_   \\(   _imp\\_isp.h\\_)を参照"

#. type: Plain text
#: imp_isp-programigo_gvidilo.md:11
#, fuzzy, no-wrap
msgid "Bildosigna prilaborado. Ĉefe inkluzivas agordojn de bildaj efikoj, reĝimoŝaltilo kaj registrado, aldono kaj forigo de sensilo.\n"
msgstr "画像処理。主に画像効果の設定、モード切り替えと記録、センサーの追加と削除が含まれます。\n"

#. type: Plain text
#: imp_isp-programigo_gvidilo.md:13
#, fuzzy, no-wrap
msgid "La ISP-modulo havas nenion komunan kun datuma fluo kaj ne bezonas esti ligita, ĝi nur funkcias laŭ efektagordo kaj sensila kontrolo.\n"
msgstr "ISPモジュールはデータフローとは関係がなく、接続する必要はありません。エフェクト構成とセンサー制御に関してのみ機能します。\n"

#. type: Title ##
#: imp_isp-programigo_gvidilo.md:14
#, fuzzy, no-wrap
msgid "Aktivigo"
msgstr "アクティベーション"

#. type: Plain text
#: imp_isp-programigo_gvidilo.md:18
#, fuzzy, no-wrap
msgid ""
"La paŝoj de aktivigo de ISP-modulo estas jenaj:\n"
"* paŝo 1: Kreu ISP-modulon\n"
msgstr ""
"ISPモジュールをアクティブ化する手順は次のとおりです。\n"
"* 手順1：ISPモジュールを作成します\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:19
#, no-wrap
msgid ""
"int ret = 0;\n"
"  // étape 1 : \n"
"  ret = IMP_ISP_Open (); \n"
"  if (ret <0) {\n"
"    printf (\"Échec de ISPInit\\n\");\n"
"    return -1;\n"
"  }\n"
msgstr ""
"int ret = 0;\n"
"  // étape 1 : \n"
"  ret = IMP_ISP_Open (); \n"
"  if (ret <0) {\n"
"    printf (\"Échec de ISPInit\\n\");\n"
"    return -1;\n"
"  }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:29
#, fuzzy, no-wrap
msgid "2a paŝo: Aldonu sensilon, la sensila pelilo estis aldonita al la kerno antaŭ ĉi tiu operacio.\n"
msgstr "ステップ2：センサーを追加します。この操作の前にセンサードライバーがカーネルに追加されました。\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:31
#, no-wrap
msgid ""
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[0].cbus_type = SENSOR_CONTROL_INTERFACE_I2C; // OU SENSOR_CONTROL_INTERFACE_SPI\n"
"  sensor[0].i2c = {\n"
"    .type = \"xxx\", // nom du périphérique I2C, qui doit être cohérent avec le nom de la structure i2c_device_id dans le pilote du capteur.\n"
"    .addr = xx, // adresse I2C\n"
"    .i2c_adapter_id = xx, // ID du contrôleur I2C où se trouve le capteur\n"
"  }\n"
"  /* OU\n"
"   * sensor[0].spi = {\n"
"   *   .modalias = \"xx\", // nom du périphérique SPI, doit être cohérent avec le nom de la structure spi_device_id dans le pilote du capteur.\n"
"   *     .bus_num = xx, // adresse du bus SPI\n"
"   *}\n"
"   */\n"
"  sensor[1].name[0]=0; // pas d'autre capteur\n"
"  ret = IMP_ISP_AddSensor (& sensor); \n"
"  if (ret <0) {\n"
"    printf (\"Impossible d'enregistrer le capteur \\n\");\n"
"    return -1;\n"
"  }\n"
msgstr ""
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[0].cbus_type = SENSOR_CONTROL_INTERFACE_I2C; // OU SENSOR_CONTROL_INTERFACE_SPI\n"
"  sensor[0].i2c = {\n"
"    .type = \"xxx\", // nom du périphérique I2C, qui doit être cohérent avec le nom de la structure i2c_device_id dans le pilote du capteur.\n"
"    .addr = xx, // adresse I2C\n"
"    .i2c_adapter_id = xx, // ID du contrôleur I2C où se trouve le capteur\n"
"  }\n"
"  /* OU\n"
"   * sensor[0].spi = {\n"
"   *   .modalias = \"xx\", // nom du périphérique SPI, doit être cohérent avec le nom de la structure spi_device_id dans le pilote du capteur.\n"
"   *     .bus_num = xx, // adresse du bus SPI\n"
"   *}\n"
"   */\n"
"  sensor[1].name[0]=0; // pas d'autre capteur\n"
"  ret = IMP_ISP_AddSensor (& sensor); \n"
"  if (ret <0) {\n"
"    printf (\"Impossible d'enregistrer le capteur \\n\");\n"
"    return -1;\n"
"  }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:54
#, fuzzy, no-wrap
msgid "paŝo 3: Aktivigu la sensilon, ĝi komencos produkti bildojn.\n"
msgstr "ステップ3：センサーを有効にすると、画像の生成が始まります。 \n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:56
#, no-wrap
msgid ""
"  ret = IMP_ISP_EnableSensor (void);\n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"  ret = IMP_ISP_EnableSensor (void);\n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:64
#, fuzzy, no-wrap
msgid "paŝo 4: Aktivigu la agordojn:\n"
msgstr "ステップ4：設定をアクティブにする：\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:66
#, no-wrap
msgid ""
"  ret = IMP_ISP_EnableTuning (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le réglage \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"  ret = IMP_ISP_EnableTuning (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible d'activer le réglage \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:74
#, fuzzy, no-wrap
msgid "paŝo 5: Alvoki ISP-elpurigan interfacon: Bonvolu raporti al la dokumentado de ISP-elpuriga interfaco.\n"
msgstr "ステップ5：ISPデバッグインターフェイスを呼び出します.ISPデバッグインターフェイスのマニュアルを参照してください。 \n"

#. type: Title ##
#: imp_isp-programigo_gvidilo.md:77
#, fuzzy, no-wrap
msgid "senaktivigo de ISP-modulo"
msgstr "ISPモジュール無効化"

#. type: Plain text
#: imp_isp-programigo_gvidilo.md:81
#, fuzzy, no-wrap
msgid ""
"La paŝoj por malinstali la ISP-modulon estas jenaj:\n"
"* paŝo 1: Malŝalti la ISP-agordon\n"
msgstr ""
"ISPモジュールをアンインストールする手順は次のとおりです。\n"
"* 手順1：ISP構成を無効にします\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:82
#, no-wrap
msgid ""
"int ret = 0;\n"
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[1].name[0] = 0;\n"
"  ret = IMP_ISP_DisableTuning ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le réglage \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"int ret = 0;\n"
"  IMPSensorInfo sensor[2];\n"
"  sensor[0].name = \"xxx\";\n"
"  sensor[1].name[0] = 0;\n"
"  ret = IMP_ISP_DisableTuning ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le réglage \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:94
#, fuzzy, no-wrap
msgid "Paŝo 2: Fermu la sensilojn.  \\( kadroj devas esti fermita antaŭ ĉi tiu operacio \\) \n"
msgstr "ステップ2：センサーを閉じます。この操作の前に  \\(フレームを閉じる必要があります \\)  \n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:96
#, no-wrap
msgid ""
"ret = IMP_ISP_DisableSensor (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"ret = IMP_ISP_DisableSensor (); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:105
#, fuzzy, no-wrap
msgid "3a paŝo: forigu la sensilojn, la sensiloj devas esti fermitaj antaŭ ĉi tiu operacio.\n"
msgstr "ステップ3：センサーを取り外します。この操作の前にセンサーを閉じる必要があります。\n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:107
#, no-wrap
msgid ""
"ret = IMP_ISP_DelSensor (& sensor); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"ret = IMP_ISP_DelSensor (& sensor); \n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Bullet: '* '
#: imp_isp-programigo_gvidilo.md:115
#, fuzzy, no-wrap
msgid "paŝo 4: Purigu la ISP-modulon, ĉiuj sensiloj devas esti forigitaj antaŭ ĉi tiu operacio.\n"
msgstr "ステップ4：ISPモジュールを清掃するには、この操作の前にすべてのセンサーを取り外す必要があります。 \n"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:117
#, no-wrap
msgid ""
"ret = IMP_ISP_Close ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"
msgstr ""
"ret = IMP_ISP_Close ();\n"
"  if (ret <0) {\n"
"  printf (\"Impossible de désactiver le capteur \\n\");\n"
"  return -1;\n"
" }\n"

#. type: Title ##
#: imp_isp-programigo_gvidilo.md:127
#, fuzzy, no-wrap
msgid "listo de funkcioj"
msgstr "関数のリスト"

#. type: Fenced code block
#: imp_isp-programigo_gvidilo.md:129
#, no-wrap
msgid ""
"int IMP_ISP_Open(void);\n"
"int IMP_ISP_Close(void);\n"
"int IMP_ISP_AddSensor(IMPSensorInfo *pinfo);\n"
"int IMP_ISP_DelSensor(IMPSensorInfo *pinfo);\n"
"int IMP_ISP_EnableSensor(void);\n"
"int IMP_ISP_DisableSensor(void);\n"
"int IMP_ISP_SetSensorRegister(uint32_t reg, uint32_t value);\n"
"int IMP_ISP_GetSensorRegister(uint32_t reg, uint32_t *value);\n"
"int IMP_ISP_EnableTuning(void);\n"
"int IMP_ISP_DisableTuning(void);\n"
"int IMP_ISP_Tuning_SetSensorFPS(uint32_t fps_num, uint32_t fps_den);\n"
"int IMP_ISP_Tuning_GetSensorFPS(uint32_t *fps_num, uint32_t *fps_den);\n"
"int IMP_ISP_Tuning_SetAntiFlickerAttr(IMPISPAntiflickerAttr attr);\n"
"int IMP_ISP_Tuning_GetAntiFlickerAttr(IMPISPAntiflickerAttr *pattr);\n"
"int IMP_ISP_Tuning_SetRawDRC(IMPISPDrcAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetRawDRC(IMPISPDrcAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetTemperDnsCtl(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetWDRAttr(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_GetWDRAttr(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetSceneMode(IMPISPSceneMode mode);\n"
"int IMP_ISP_Tuning_GetSceneMode(IMPISPSceneMode *pmode);\n"
"int IMP_ISP_Tuning_SetColorfxMode(IMPISPColorfxMode mode);\n"
"int IMP_ISP_Tuning_GetColorfxMode(IMPISPColorfxMode *pmode);\n"
"int IMP_ISP_Tuning_SetBrightness(unsigned char bright);\n"
"int IMP_ISP_Tuning_GetBrightness(unsigned char *pbright);\n"
"int IMP_ISP_Tuning_SetContrast(unsigned char contrast);\n"
"int IMP_ISP_Tuning_GetContrast(unsigned char *pcontrast);\n"
"int IMP_ISP_Tuning_SetSharpness(unsigned char sharpness);\n"
"int IMP_ISP_Tuning_GetSharpness(unsigned char *psharpness);\n"
"int IMP_ISP_Tuning_SetSaturation(unsigned char sat);\n"
"int IMP_ISP_Tuning_GetSaturation(unsigned char *psat);\n"
"int IMP_ISP_Tuning_SetISPProcess(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_SetFWFreeze(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_SaveAllParam(char *path);\n"
"int IMP_ISP_Tuning_SetISPBypass(IMPISPTuningOpsMode enable);\n"
"int IMP_ISP_Tuning_GetTotalGain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetISPHflip(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_GetISPHflip(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetISPVflip(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_GetISPVflip(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetISPRunningMode(IMPISPRunningMode mode);\n"
"int IMP_ISP_Tuning_GetISPRunningMode(IMPISPRunningMode *pmode);\n"
"int IMP_ISP_Tuning_SetAeStrategy(IMPISPAeStrategy strategy);\n"
"int IMP_ISP_Tuning_GetAeStrategy(IMPISPAeStrategy *pstrategy);\n"
"int IMP_ISP_Tuning_SetGamma(IMPISPGamma *gamma);\n"
"int IMP_ISP_Tuning_GetGamma(IMPISPGamma *gamma);\n"
"int IMP_ISP_Tuning_SetAeComp(int comp);\n"
"int IMP_ISP_Tuning_GetAeComp(int *comp);\n"
"int IMP_ISP_Tuning_SetExpr(IMPISPExpr *expr);\n"
"int IMP_ISP_Tuning_GetExpr(IMPISPExpr *expr);\n"
"int IMP_ISP_Tuning_AE_GetROI(IMPISPAERoi *isp_ae_roi);\n"
"int IMP_ISP_Tuning_AE_SetROI(IMPISPAERoi *isp_ae_roi);\n"
"int IMP_ISP_Tuning_SetWB(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_GetWB(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_GetWB_Statis(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_Awb_GetCwfShift(IMPISPWB *isp_wb_attr);\n"
"int IMP_ISP_Tuning_Awb_SetCwfShift(IMPISPWB *isp_wb_attr);\n"
"int IMP_ISP_Tuning_SetMaxAgain(uint32_t gain);\n"
"int IMP_ISP_Tuning_GetMaxAgain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetMaxDgain(uint32_t gain);\n"
"int IMP_ISP_Tuning_GetMaxDgain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetVideoDrop(void (*cb)(void));\n"
"int IMP_ISP_Tuning_SetHiLightDepress(uint32_t strength);\n"
"int IMP_ISP_Tuning_SetTemperStrength(uint32_t ratio);\n"
"int IMP_ISP_Tuning_SetSinterStrength(uint32_t ratio);\n"
"int IMP_ISP_Tuning_SetDPStrength(uint32_t ratio);\n"
"int IMP_ISP_Tuning_SetAntiFogAttr(IMPISPAntiFogAttr attr);\n"
"int IMP_ISP_Tuning_GetEVAttr(IMPISPEVAttr *attr);\n"
msgstr ""
"int IMP_ISP_Open(void);\n"
"int IMP_ISP_Close(void);\n"
"int IMP_ISP_AddSensor(IMPSensorInfo *pinfo);\n"
"int IMP_ISP_DelSensor(IMPSensorInfo *pinfo);\n"
"int IMP_ISP_EnableSensor(void);\n"
"int IMP_ISP_DisableSensor(void);\n"
"int IMP_ISP_SetSensorRegister(uint32_t reg, uint32_t value);\n"
"int IMP_ISP_GetSensorRegister(uint32_t reg, uint32_t *value);\n"
"int IMP_ISP_EnableTuning(void);\n"
"int IMP_ISP_DisableTuning(void);\n"
"int IMP_ISP_Tuning_SetSensorFPS(uint32_t fps_num, uint32_t fps_den);\n"
"int IMP_ISP_Tuning_GetSensorFPS(uint32_t *fps_num, uint32_t *fps_den);\n"
"int IMP_ISP_Tuning_SetAntiFlickerAttr(IMPISPAntiflickerAttr attr);\n"
"int IMP_ISP_Tuning_GetAntiFlickerAttr(IMPISPAntiflickerAttr *pattr);\n"
"int IMP_ISP_Tuning_SetRawDRC(IMPISPDrcAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetRawDRC(IMPISPDrcAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetTemperDnsCtl(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_GetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
"int IMP_ISP_Tuning_SetWDRAttr(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_GetWDRAttr(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetSceneMode(IMPISPSceneMode mode);\n"
"int IMP_ISP_Tuning_GetSceneMode(IMPISPSceneMode *pmode);\n"
"int IMP_ISP_Tuning_SetColorfxMode(IMPISPColorfxMode mode);\n"
"int IMP_ISP_Tuning_GetColorfxMode(IMPISPColorfxMode *pmode);\n"
"int IMP_ISP_Tuning_SetBrightness(unsigned char bright);\n"
"int IMP_ISP_Tuning_GetBrightness(unsigned char *pbright);\n"
"int IMP_ISP_Tuning_SetContrast(unsigned char contrast);\n"
"int IMP_ISP_Tuning_GetContrast(unsigned char *pcontrast);\n"
"int IMP_ISP_Tuning_SetSharpness(unsigned char sharpness);\n"
"int IMP_ISP_Tuning_GetSharpness(unsigned char *psharpness);\n"
"int IMP_ISP_Tuning_SetSaturation(unsigned char sat);\n"
"int IMP_ISP_Tuning_GetSaturation(unsigned char *psat);\n"
"int IMP_ISP_Tuning_SetISPProcess(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_SetFWFreeze(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_SaveAllParam(char *path);\n"
"int IMP_ISP_Tuning_SetISPBypass(IMPISPTuningOpsMode enable);\n"
"int IMP_ISP_Tuning_GetTotalGain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetISPHflip(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_GetISPHflip(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetISPVflip(IMPISPTuningOpsMode mode);\n"
"int IMP_ISP_Tuning_GetISPVflip(IMPISPTuningOpsMode *pmode);\n"
"int IMP_ISP_Tuning_SetISPRunningMode(IMPISPRunningMode mode);\n"
"int IMP_ISP_Tuning_GetISPRunningMode(IMPISPRunningMode *pmode);\n"
"int IMP_ISP_Tuning_SetAeStrategy(IMPISPAeStrategy strategy);\n"
"int IMP_ISP_Tuning_GetAeStrategy(IMPISPAeStrategy *pstrategy);\n"
"int IMP_ISP_Tuning_SetGamma(IMPISPGamma *gamma);\n"
"int IMP_ISP_Tuning_GetGamma(IMPISPGamma *gamma);\n"
"int IMP_ISP_Tuning_SetAeComp(int comp);\n"
"int IMP_ISP_Tuning_GetAeComp(int *comp);\n"
"int IMP_ISP_Tuning_SetExpr(IMPISPExpr *expr);\n"
"int IMP_ISP_Tuning_GetExpr(IMPISPExpr *expr);\n"
"int IMP_ISP_Tuning_AE_GetROI(IMPISPAERoi *isp_ae_roi);\n"
"int IMP_ISP_Tuning_AE_SetROI(IMPISPAERoi *isp_ae_roi);\n"
"int IMP_ISP_Tuning_SetWB(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_GetWB(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_GetWB_Statis(IMPISPWB *wb);\n"
"int IMP_ISP_Tuning_Awb_GetCwfShift(IMPISPWB *isp_wb_attr);\n"
"int IMP_ISP_Tuning_Awb_SetCwfShift(IMPISPWB *isp_wb_attr);\n"
"int IMP_ISP_Tuning_SetMaxAgain(uint32_t gain);\n"
"int IMP_ISP_Tuning_GetMaxAgain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetMaxDgain(uint32_t gain);\n"
"int IMP_ISP_Tuning_GetMaxDgain(uint32_t *gain);\n"
"int IMP_ISP_Tuning_SetVideoDrop(void (*cb)(void));\n"
"int IMP_ISP_Tuning_SetHiLightDepress(uint32_t strength);\n"
"int IMP_ISP_Tuning_SetTemperStrength(uint32_t ratio);\n"
"int IMP_ISP_Tuning_SetSinterStrength(uint32_t ratio);\n"
"int IMP_ISP_Tuning_SetDPStrength(uint32_t ratio);\n"
"int IMP_ISP_Tuning_SetAntiFogAttr(IMPISPAntiFogAttr attr);\n"
"int IMP_ISP_Tuning_GetEVAttr(IMPISPEVAttr *attr);\n"

#, fuzzy, no-wrap
#~ msgid "Gvidilo pri video-programado"
#~ msgstr "ビデオプログラミングガイド"

#, fuzzy, no-wrap
#~ msgid "IMP_ISP (voir imp_isp.h)"
#~ msgstr "IMP_ISP (voir imp_isp.h)"

#, fuzzy, no-wrap
#~ msgid "Paŝo 3: Aktivigu la sensilon, ĝi komencos produkti bildojn.\n"
#~ msgstr "ステップ3：センサーをアクティブにすると、画像の生成が開始されます。\n"

#, fuzzy, no-wrap
#~ msgid "Paŝo 5: Alvoki ISP-elpurigan interfacon: Bonvolu raporti al la dokumentado de ISP-elpuriga interfaco.\n"
#~ msgstr "手順5：ISPデバッグインターフェイスを呼び出す：ISPデバッグインターフェイスのドキュメントを参照してください。\n"

#, fuzzy, no-wrap
#~ msgid "Senaktivigo de ISP-modulo"
#~ msgstr "ISPモジュールの無効化"

#, fuzzy, no-wrap
#~ msgid "2a paŝo: fermu la sensilojn. (FrameSource devas esti fermita antaŭ ĉi tiu operacio)\n"
#~ msgstr "ステップ2：センサーを閉じます。 (この操作の前にFrameSourceを閉じる必要があります)\n"

#, fuzzy, no-wrap
#~ msgid "Paŝo 4: Purigu la ISP-modulon, ĉiuj sensiloj devas esti forigitaj antaŭ ĉi tiu operacio.\n"
#~ msgstr "ステップ4：ISPモジュールをクリーニングします。この操作の前に、すべてのセンサーを取り外す必要があります。\n"

#, fuzzy
#~ msgid "int Pim _ISP_ Malfermu ( dezerta ); \n"
#~ msgstr "int PIM  _ISP_ オープン ( 砂漠 )。  \n"

#, fuzzy, no-wrap
#~ msgid ""
#~ "int IMP_ISP_Malferma(malplena);\n"
#~ "int IMP_ISP_Fermi(malplenan);\n"
#~ "int IMP_ISP_AddSensor(IMPSensorInfo *pinfo);\n"
#~ "int IMP_ISP_DelSensor(IMPSensorInfo *pinfo);\n"
#~ "int IMP_ISP_EnableSensor(malplena);\n"
#~ "int IMP_ISP_DisableSensor(malplena);\n"
#~ "int IMP_ISP_SetSensorRegister(uint32_t reg, uint32_t valoro);\n"
#~ "int IMP_ISP_GetSensorRegister(uint32_t reg, uint32_t *valoro);\n"
#~ "int IMP_ISP_EnableTuning(malplena);\n"
#~ "int IMP_ISP_DisableTuning(malplena);\n"
#~ "int IMP_ISP_Agordo_SetSensorFPS(uint32_t fps_num, uint32_t fps_den);\n"
#~ "int IMP_ISP_Tuning_GetSensorFPS(uint32_t *fps_num, uint32_t *fps_den);\n"
#~ "int IMP_ISP_Agordo_SetAntiFlickerAttr(IMPISPAntiflickerAttr attr);\n"
#~ "int IMP_ISP_Tuning_GetAntiFlickerAttr(IMPISPAntiflickerAttr *pattr);\n"
#~ "int IMP_ISP_Agordo_SetRawDRC(IMPISPDrcAttr *pinfo);\n"
#~ "int IMP_ISP_Tuning_GetRawDRC(IMPISPDrcAttr *pinfo);\n"
#~ "int IMP_ISP_Agordo_SetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
#~ "int IMP_ISP_Tuning_GetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
#~ "int IMP_ISP_Agordo_SetTemperDnsCtl(IMPISPTemperDenoiseAttr *pinfo);\n"
#~ "int IMP_ISP_Tuning_SetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
#~ "int IMP_ISP_Agordo_GetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
#~ "int IMP_ISP_Tuning_SetWDRAttr(IMPISPTuningOpsMode mode);\n"
#~ "int IMP_ISP_Agordo_GetWDRAttr(IMPISPTuningOpsMode *pmode);\n"
#~ "int IMP_ISP_Tuning_SetSceneMode(IMPISPSceneMode mode);\n"
#~ "int IMP_ISP_Agordo_GetSceneMode(IMPISPSceneMode *pmode);\n"
#~ "int IMP_ISP_Tuning_SetColorfxMode(IMPISPColorfxMode mode);\n"
#~ "int IMP_ISP_Agordo_GetColorfxMode(IMPISPColorfxMode *pmode);\n"
#~ "int IMP_ISP_Tuning_Agordu Brilecon(sennoma signo brila);\n"
#~ "int IMP_ISP_Agordo_GetBrightness(unsigned char *pbright);\n"
#~ "int IMP_ISP_Tuning_SetContrast(sennoma signokontrasto);\n"
#~ "int IMP_ISP_Agordo_GetContrast(unsigned char *pcontrast);\n"
#~ "int IMP_ISP_Tuning_SetSharpness(sennoma akra akreco);\n"
#~ "int IMP_ISP_Agordo_GetSharpness(unsigned char *psharpness);\n"
#~ "int IMP_ISP_Tuning_SetSaturation(sennoma signo (sat 22 °);\n"
#~ "int IMP_ISP_Agordo_GetSaturation(unsigned char *psat);\n"
#~ "int IMP_ISP_Tuning_SetISPProcess(IMPISPTuningOpsMode mode);\n"
#~ "int IMP_ISP_Agordo_SetFWFreeze(IMPISPTuningOpsMode mode);\n"
#~ "int IMP_ISP_Tuning_SaveAllParam(char *vojo);\n"
#~ "int IMP_ISP_Agordo_SetISPBypass(IMPISPTuningOpsMode enable);\n"
#~ "int IMP_ISP_Tuning_GetTotalGain(uint32_t *gain);\n"
#~ "int IMP_ISP_Tuning_Agordu ISPHflip(IMPISPTuningOpsMode mode);\n"
#~ "int IMP_ISP_Agordo_GetISPHflip(IMPISPTuningOpsMode *pmode);\n"
#~ "int IMP_ISP_Tuning_SetISPVflip(IMPISPTuningOpsMode mode);\n"
#~ "int IMP_ISP_Agordo_GetISPVflip(IMPISPTuningOpsMode *pmode);\n"
#~ "int IMP_ISP_Tuning_SetISPRunningMode(IMPISPRunningMode mode);\n"
#~ "int IMP_ISP_Agordo_GetISPRunningMode(IMPISPRunningMode *pmode);\n"
#~ "int IMP_ISP_Tuning_SetAeStrategy(IMPISPAeStrategy-strategio);\n"
#~ "int IMP_ISP_Agordo_GetAeStrategy(IMPISPAeStrategy *pstrategy);\n"
#~ "int IMP_ISP_Tuning_SetGamma(IMPISPGamma *gama);\n"
#~ "int IMP_ISP_Agordo_GetGamma(IMPISPGamma *gamma);\n"
#~ "int IMP_ISP_Tuning_SetAeComp(int comp);\n"
#~ "int IMP_ISP_Agordo_GetAeComp(int *comp);\n"
#~ "int IMP_ISP_Tuning_SetExpr(IMPISPExpr *ekspr);\n"
#~ "int IMP_ISP_Agordo_GetExpr(IMPISPExpr *expr);\n"
#~ "int IMP_ISP_Tuning_AE_GetROI(IMPISPAERoi *isp_ae_roi);\n"
#~ "int IMP_ISP_Tuning_AE_SetROI(IMPISPAERoi *isp_ae_roi);\n"
#~ "int IMP_ISP_Tuning_SetWB(IMPISPWB *wb);\n"
#~ "int IMP_ISP_Agordo_GetWB(IMPISPWB *wb);\n"
#~ "int IMP_ISP_Tuning_GetWB_Statis(IMPISPWB *wb);\n"
#~ "int IMP_ISP_Tuning_Awb_GetCwfShift(IMPISPWB *isp_wb_attr);\n"
#~ "int IMP_ISP_Tuning_Awb_SetCwfShift(IMPISPWB *isp_wb_attr);\n"
#~ "int IMP_ISP_Tuning_SetMaxAgain(uint32_t gain);\n"
#~ "int IMP_ISP_Tuning_GetMaxAgain(uint32_t *gain);\n"
#~ "int IMP_ISP_Tuning_SetMaxDgain(uint32_t gain);\n"
#~ "int IMP_ISP_Tuning_GetMaxDgain(uint32_t *gain);\n"
#~ "int IMP_ISP_Tuning_SetVideoDrop(malplena (*cb)(malplena));\n"
#~ "int IMP_ISP_Agordo_SetHiLightDepress(uint32_t forto);\n"
#~ "int IMP_ISP_Agordo_SetTemperStrength(uint32_t-proporcio);\n"
#~ "int IMP_ISP_Agordo_SetSinterStrength(uint32_t-proporcio);\n"
#~ "int IMP_ISP_Agordo_SetDPStrength(uint32_t-proporcio);\n"
#~ "int IMP_ISP_Agordo_SetAntiFogAttr(IMPISPAntiFogAttr attr);\n"
#~ "int IMP_ISP_Tuning_GetEVAttr(IMPISPEVAttr *attr);\n"
#~ msgstr ""
#~ "int IMP_ISP_オープン(空);\n"
#~ "int IMP_ISP_閉じる(空);\n"
#~ "int IMP_ISP_AddSensor(IMPSensorInfo *pinfo);\n"
#~ "int IMP_ISP_DelSensor(IMPSensorInfo *pinfo);\n"
#~ "int IMP_ISP_EnableSensor(empty);\n"
#~ "int IMP_ISP_DisableSensor(empty);\n"
#~ "int IMP_ISP_SetSensorRegister(uint32_t reg, uint32_t値);\n"
#~ "int IMP_ISP_GetSensorRegister(uint32_t reg, uint32_t *値);\n"
#~ "int IMP_ISP_EnableTuning(ブランク);\n"
#~ "int IMP_ISP_DisableTuning(ブランク);\n"
#~ "int IMP_ISP_構成_SetSensorFPS(uint32_t fps_num, uint32_t fps_den);\n"
#~ "int IMP_ISP_Tuning_GetSensorFPS(uint32_t *fps_num、uint32_t *fps_den);\n"
#~ "int IMP_ISP_構成_SetAntiFlickerAttr(IMPISPAntiflickerAttr attr);\n"
#~ "int IMP_ISP_Tuning_GetAntiFlickerAttr(IMPISPAntiflickerAttr *pattr);\n"
#~ "int IMP_ISP_構成_SetRawDRC(IMPISPDrcAttr *pinfo);\n"
#~ "int IMP_ISP_Tuning_GetRawDRC(IMPISPDrcAttr *pinfo);\n"
#~ "int IMP_ISP_構成_SetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
#~ "int IMP_ISP_Tuning_GetSinterDnsAttr(IMPISPSinterDenoiseAttr *pinfo);\n"
#~ "int IMP_ISP_構成_SetTemperDnsCtl(IMPISPTemperDenoiseAttr *pinfo);\n"
#~ "int IMP_ISP_Tuning_SetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
#~ "int IMP_ISP_構成_GetTemperDnsAttr(IMPISPTemperDenoiseAttr *pinfo);\n"
#~ "int IMP_ISP_Tuning_SetWDRAttr(IMPISPTuningOpsModeモード);\n"
#~ "int IMP_ISP_設定_GetWDRAttr(IMPISPTuningOpsMode *pmode);\n"
#~ "int IMP_ISP_Tuning_SetSceneMode(IMPISPSce​​neModeモード);\n"
#~ "int IMP_ISP_設定_GetSceneMode(IMPISPSceneMode *pmode);\n"
#~ "int IMP_ISP_Tuning_SetColorfxMode(IMPISPColorfxModeモード);\n"
#~ "int IMP_ISP_設定_GetColorfxMode(IMPISPColorfxMode *pmode);\n"
#~ "int IMP_ISP_Tuning_明るさの設定(名前のない記号明るい);\n"
#~ "int IMP_ISP_構成_GetBrightness(unsigned char *pbright);\n"
#~ "int IMP_ISP_Tuning_SetContrast(名前のない文字のコントラスト);\n"
#~ "int IMP_ISP_構成_GetContrast(unsigned char *pcontrast);\n"
#~ "int IMP_ISP_Tuning_SetSharpness(無名のシャープネスシャープネス);\n"
#~ "int IMP_ISP_構成_GetSharpness(unsigned char *psharpness);\n"
#~ "int IMP_ISP_Tuning_SetSaturation(名前のない符号 (から22°);\n"
#~ "int IMP_ISP_構成_GetSaturation(unsigned char *psat);\n"
#~ "int IMP_ISP_Tuning_SetISPProcess(IMPISPTuningOpsModeモード);\n"
#~ "int IMP_ISP_構成_SetFWFreeze(IMPISPTuningOpsMode mode);\n"
#~ "int IMP_ISP_Tuning_SaveAllParam(char *パス);\n"
#~ "int IMP_ISP_セットアップ_SetISPBypass(IMPISPTuningOpsMode enable);\n"
#~ "int IMP_ISP_Tuning_GetTotalGain(uint32_t *gain);\n"
#~ "int IMP_ISP_Tuning_Set ISPHflip(IMPISPTuningOpsModeモード);\n"
#~ "int IMP_ISP_構成_GetISPHflip(IMPISPTuningOpsMode *pmode);\n"
#~ "int IMP_ISP_Tuning_SetISPVflip(IMPISPTuningOpsModeモード);\n"
#~ "int IMP_ISP_構成_GetISPVflip(IMPISPTuningOpsMode *pmode);\n"
#~ "int IMP_ISP_Tuning_SetISPRunningMode(IMPISPRunningModeモード);\n"
#~ "int IMP_ISP_構成_GetISPRunningMode(IMPISPRunningMode *pmode);\n"
#~ "int IMP_ISP_Tuning_SetAeStrategy(IMPISPAeStrategy戦略);\n"
#~ "int IMP_ISP_構成_GetAeStrategy(IMPISPAeStrategy *pstrategy);\n"
#~ "int IMP_ISP_Tuning_SetGamma(IMPISPGamma *範囲);\n"
#~ "int IMP_ISP_構成_GetGamma(IMPISPGamma *gamma);\n"
#~ "int IMP_ISP_Tuning_SetAeComp(int comp);\n"
#~ "int IMP_ISP_構成_GetAeComp(int *comp);\n"
#~ "int IMP_ISP_Tuning_SetExpr(IMPISPExpr *ekspr);\n"
#~ "int IMP_ISP_構成_GetExpr(IMPISPExpr *expr);\n"
#~ "int IMP_ISP_Tuning_AE_GetROI(IMPISPAERoi *isp_ae_roi);\n"
#~ "int IMP_ISP_Tuning_AE_SetROI(IMPISPAERoi *isp_ae_roi);\n"
#~ "int IMP_ISP_Tuning_SetWB(IMPISPWB *wb);\n"
#~ "int IMP_ISP_構成_GetWB(IMPISPWB *wb);\n"
#~ "int IMP_ISP_Tuning_GetWB_Statis(IMPISPWB *wb);\n"
#~ "int IMP_ISP_Tuning_Awb_GetCwfShift(IMPISPWB *isp_wb_attr);\n"
#~ "int IMP_ISP_Tuning_Awb_SetCwfShift(IMPISPWB *isp_wb_attr);\n"
#~ "int IMP_ISP_Tuning_SetMaxAgain(uint32_t gain);\n"
#~ "int IMP_ISP_Tuning_GetMaxAgain(uint32_t *gain);\n"
#~ "int IMP_°）ISP_Tuning_SetMaxDgain(uint32_t gain);\n"
#~ "int IMP_ISP_Tuning_GetMaxDgain(uint32_t *gain);\n"
#~ "int IMP_ISP_Tuning_SetVideoDrop(空 (*cb)(空));\n"
#~ "int IMP_ISP_構成_SetHiLightDepress(uint32_t力);\n"
#~ "int IMP_ISP_構成_SetTemperStrength(uint32_t比);\n"
#~ "int IMP_ISP_構成_SetSinterStrength(uint32_t比);\n"
#~ "int IMP_ISP_構成_SetDPStrength(uint32_t比);\n"
#~ "int IMP_ISP_構成_SetAntiFogAttr(IMPISPAntiFogAttr attr);\n"
#~ "int IMP_ISP_Tuning_GetEVAttr(IMPISPEVAttr *attr);\n"
